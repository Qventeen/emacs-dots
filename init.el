;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t

(defun q/test-time-load ()
  (message "Emacs ready in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'q/test-time-load)

(setq gc-cons-threshold most-positive-fixnum)

;;Initial Package manager
;;===============================================================
(setq package-enable-at-startup nil)

;;Add repositories
(setq package-archives
      '(("elpa" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))



;;Butstrap setup straight pakcage manager
;;================================================================
(defvar bootstrap-version)
(defvar straight-process-buffer " *straight-p*")
(defvar straight-whatcher-process-buffer " *straight-w*")

;;straight fix for flycheck
(defvar straight-fix-flycheck t)

;;straight fix for org
(defvar straight-fix-org t)

;;Set stright for work with use-package
(defvar straight-use-package-by-default 1)


(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;;https://github.com/xendk/dotemacs/blob/master/init.el
;;===========================================================================
;; Ensure that flycheck can see that straight will be available for
;; the straight-register-package.
(eval-and-compile
  (require 'straight))
;;Install-use package
(straight-use-package 'use-package)


;; Bootstrap `use-package'
;; Emacs 26 doesn't seem to know that it has nadvice.
;; (customize-set-variable 'straight-built-in-pseudo-packages (quote (emacs python nadvice)))

;; When flycheck checks this file it needs use-package (and straight
;; above) loaded to understand the use-package forms. Also the reason
;; for the flycheck-emacs-lisp-load-path on the first line of the
;; file.
(eval-and-compile (require 'use-package))

(use-package use-package
  :ensure nil
  :custom
  (use-package-always-ensure nil)
  (use-package-verbose t))
;;===========================================================================

;;This function load init.el from init.org when file is modifed
(defun q/load-init-from-org ()
  (let ((init-org-file (concat user-emacs-directory "init.org")))
    (if (file-newer-than-file-p init-org-file user-init-file)
        ;;(org-babel-load-file init-org-file)
        (org-babel-tangle-file
         init-org-file
         user-init-file
         "emacs-lisp\\|elisp"))))


(add-hook 'kill-emacs-hook #'q/load-init-from-org)

(setq custom-file (make-temp-file ""))

(require 'cl-lib)
(require 'seq)
(use-package f :demand t)        ;;files
(use-package dash :demand t)     ;;lists
(use-package ht :demand t)       ;;hash-tables
(use-package s :demand t)        ;;strings
(use-package a :demand t)        ;;assotiation lists
(use-package anaphora :demand t) ;;anaphora
(use-package org :demand t)        ;;org

(defvar q/home-directory (expand-file-name "~/"))
(defvar q/data-directory (concat q/home-directory ".emacs.d/"))
(defvar q/config-directory (concat q/data-directory "configs/"))
(defvar q/projects-directory (concat q/home-directory "projects/"))
(defvar q/sources-directory (concat q/home-directory "src/"))
(defvar q/org-directory (concat q/home-directory "org/"))
(defvar q/yas-directory (concat q/data-directory "yasnippet/"))

(when (string-equal system-type "windows-nt")
  (setq q/home-directory (expand-file-name "d:/"))
  (setq q/data-directory (concat q/home-directory "Emacs/"))
  (setq q/projects-directory (concat q/home-directory "projects/"))
  (setq q/sources-directory (concat q/home-directory "src/"))
  (setq q/org-directory (concat q/home-directory "org/"))
  (setq q/yas-directory (concat q/data-directory "yasnippet/")))

(defun q/get-org-file (file-name)
  (concat q/org-directory file-name))

(defun q/get-config-file (file-name)
  (concat q/config-directory file-name))

(defun q/get-project-directory (name)
  (concat q/projects-directory name))

(defun q/get-source-directory (name)
  (concat q/sources-directory name))

;;org files
(defvar q/notes-file-name (q/get-org-file "notes/notes.org") "Main notes file-name")
(defvar q/bookmarks-file-name (q/get-org-file "bookmarks/bookmarks.org") "Main bookmarks file-name")

;;storages dir
(defvar q/autosaves-directory (concat q/data-directory "autosaves/") "Main bookmarks file-name")
(defvar q/backups-directory (concat q/data-directory "backups/") "Main bookmarks file-name")

(setq byte-compile-warnings '(cl-functions))

;;Отключить менюшки
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tab-bar-mode -1)
(setq use-dialog-box nil)

;;Заблокировать стандартное стартовое окно
(setq inhibit-startup-message t)

;;Большое окно при старте
(toggle-frame-maximized)

;;Default font
(add-to-list 'default-frame-alist
;;'(font . "Comic Sans MS-14")
;;'(font . "Hack-14")
'(font . "JetBrains Mono-14"))

(global-visual-line-mode 1)

;; Longer whitespace, otherwise syntax highlighting is limited to default column
(setq whitespace-line-column 500)

(use-package ace-window
:bind 
("M-o" . ace-window)
:custom
(aw-dispatch-always t))

;;winmove-mode переключает фокус расположенные рядом открытые окна
;;(windmove-default-keybindings 'control)

;;Сохранение рабочей сессии
(desktop-save-mode 1)

;;replace yes-or-no-p -> y-or-n-p
(defalias 'yes-or-no-p 'y-or-n-p)

;;Включить нумерацию колонок
(column-number-mode 1)

;;Включить возможность преобразования 
;;Региона в символы верхнего и нижнего регистра
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;;toggle in autosave
(setq auto-save-default t)

;;save every 60 sec or 60 keystroke 
(setq auto-save-timeout 60)
(setq auto-save-interval 60)

;;keep autosaves in one place
(unless (file-exists-p q/autosaves-directory)
  (make-directory q/autosaves-directory))

(setq auto-save-file-name-transforms
    `((".*" ,q/autosaves-directory t)))

(setq create-lockfiles nil)

;;Delete files to trash
(setq delete-by-moving-to-trash t)

;;backup every save
(use-package backup-each-save
  :hook (after-save . backup-each-save))

;;keep 10 backups
(setq kept-new-versions 10)

;;delete old backups
(setq delete-old-versions t)

;;copy files to avoid various problems
(setq backup-by-copying t)

;;backup files even if version controlled
(setq vc-make-backup-files t)

;;keep backups in a single place
(unless (file-exists-p q/backups-directory)
  (make-directory q/backups-directory))

(setq backup-directory-alist
      `((".*" . ,q/backups-directory)))

(setq make-backup-files t)

(setq revert-without-query '("\\.png"))

;;C-q quoted-insert = 10 radix
(setq read-quoted-char-radix 10)

;;Задаем ширину отступа в четыре пробела
(setq tab-width 4)
(setq tab-stop-list (quote (0 4 8)))

(setq-default fill-column 79)

(use-package emacs
:config
  (setq initial-scratch-message "")
;;  (initial-buffer-choice t)
  (setq initial-major-mode 'lisp-interaction-mode))

(global-prettify-symbols-mode +1)

;;  (electric-pair-mode 1)

;; (use-package paren
;;   :commands (show-paren-mode)
;;   :hook (after-init . show-paren-mode)
;;   :custom
;;   (show-paren-delay 0)
;;   :config
;;   (set-face-foreground 'show-paren-match "green4")
;;   (set-face-foreground 'show-paren-mismatch "#f00")
;;   (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
;;   (set-face-attribute 'show-paren-mismatch nil :weight 'extra-bold))



;;(which-function-mode)

;;Включить относительную нумерацию строк
;;(setq display-line-numbers-type (quote relative))
;; Включить последовательную нумерацию строк
;;(setq display-line-numbers-type (quote t))

;;Отображает номера строк на дисплее
;;(global-display-line-numbers-mode)

;;Adding visual fill column to text modes.
;;This minor mode wrap lines at fill-column instead endge of screen
;;(use-package visual-fill-column
;;  :hook (text-mode . visual-fill-column-mode))

(use-package smartparens
  :config
  (require 'smartparens-config)
  (progn (show-smartparens-global-mode t))
  :hook
  (prog-mode . turn-on-smartparens-strict-mode)
  :bind (:map smartparens-mode-map
	      ("C-M-a" . sp-beginning-of-sexp)
	      ("C-M-e" . sp-end-of-sexp)
;;	        ("C-<up>" . sp-up-sexp)
;;  	        ("C-<down>" . sp-down-sexp)
;;              ("M-<up>" . sp-backward-up-sexp)
;;              ("M-<down>" . sp-backward-down-sexp)
	      ("C-M-f" . sp-forward-sexp)
	      ("C-M-b" . sp-backward-sexp)
	      ("C-M-n" . sp-next-sexp)
	      ("C-M-P" . sp-prev-sexp)
	      ))

;; ;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; keybinding management
;; (use-package smartparens
;; (define-key smartparens-mode-map (kbd "C-M-f") 'sp-forward-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-b") 'sp-backward-sexp)

;; (define-key smartparens-mode-map (kbd "C-M-d") 'sp-down-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-a") 'sp-backward-down-sexp)
;; (define-key smartparens-mode-map (kbd "C-S-d") 'sp-beginning-of-sexp)
;; (define-key smartparens-mode-map (kbd "C-S-a") 'sp-end-of-sexp)

;; (define-key smartparens-mode-map (kbd "C-M-e") 'sp-up-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-u") 'sp-backward-up-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-t") 'sp-transpose-sexp)

;; (define-key smartparens-mode-map (kbd "C-M-n") 'sp-forward-hybrid-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-p") 'sp-backward-hybrid-sexp)

;; (define-key smartparens-mode-map (kbd "C-M-k") 'sp-kill-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-w") 'sp-copy-sexp)

;; (define-key smartparens-mode-map (kbd "M-<delete>") 'sp-unwrap-sexp)
;; (define-key smartparens-mode-map (kbd "M-<backspace>") 'sp-backward-unwrap-sexp)

;; (define-key smartparens-mode-map (kbd "C-<right>") 'sp-forward-slurp-sexp)
;; (define-key smartparens-mode-map (kbd "C-<left>") 'sp-forward-barf-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-<left>") 'sp-backward-slurp-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-<right>") 'sp-backward-barf-sexp)

;; (define-key smartparens-mode-map (kbd "M-D") 'sp-splice-sexp)
;; (define-key smartparens-mode-map (kbd "C-M-<delete>") 'sp-splice-sexp-killing-forward)
;; (define-key smartparens-mode-map (kbd "C-M-<backspace>") 'sp-splice-sexp-killing-backward)
;; (define-key smartparens-mode-map (kbd "C-S-<backspace>") 'sp-splice-sexp-killing-around)

;; (define-key smartparens-mode-map (kbd "C-]") 'sp-select-next-thing-exchange)
;; (define-key smartparens-mode-map (kbd "C-<left_bracket>") 'sp-select-previous-thing)
;; (define-key smartparens-mode-map (kbd "C-M-]") 'sp-select-next-thing)

;; (define-key smartparens-mode-map (kbd "M-F") 'sp-forward-symbol)
;; (define-key smartparens-mode-map (kbd "M-B") 'sp-backward-symbol)

;; (define-key smartparens-mode-map (kbd "C-\"") 'sp-change-inner)
;; (define-key smartparens-mode-map (kbd "M-i") 'sp-change-enclosing)

;; (bind-key "C-c f" (lambda () (interactive) (sp-beginning-of-sexp 2)) smartparens-mode-map)
;; (bind-key "C-c b" (lambda () (interactive) (sp-beginning-of-sexp -2)) smartparens-mode-map)

;; (bind-key "C-M-s"
;;           (defhydra smartparens-hydra ()
;;             "Smartparens"
;;             ("d" sp-down-sexp "Down")
;;             ("e" sp-up-sexp "Up")
;;             ("u" sp-backward-up-sexp "Up")
;;             ("a" sp-backward-down-sexp "Down")
;;             ("f" sp-forward-sexp "Forward")
;;             ("b" sp-backward-sexp "Backward")
;;             ("k" sp-kill-sexp "Kill" :color blue)
;;             ("q" nil "Quit" :color blue))
;;           smartparens-mode-map)

;; (bind-key "H-t" 'sp-prefix-tag-object smartparens-mode-map)
;; (bind-key "H-p" 'sp-prefix-pair-object smartparens-mode-map)
;; (bind-key "H-y" 'sp-prefix-symbol-object smartparens-mode-map)
;; (bind-key "H-h" 'sp-highlight-current-sexp smartparens-mode-map)
;; (bind-key "H-e" 'sp-prefix-save-excursion smartparens-mode-map)
;; (bind-key "H-s c" 'sp-convolute-sexp smartparens-mode-map)
;; (bind-key "H-s a" 'sp-absorb-sexp smartparens-mode-map)
;; (bind-key "H-s e" 'sp-emit-sexp smartparens-mode-map)
;; (bind-key "H-s p" 'sp-add-to-previous-sexp smartparens-mode-map)
;; (bind-key "H-s n" 'sp-add-to-next-sexp smartparens-mode-map)
;; (bind-key "H-s j" 'sp-join-sexp smartparens-mode-map)
;; (bind-key "H-s s" 'sp-split-sexp smartparens-mode-map)
;; (bind-key "H-s r" 'sp-rewrap-sexp smartparens-mode-map)
;; (defvar hyp-s-x-map)
;; (define-prefix-command 'hyp-s-x-map)
;; (bind-key "H-s x" hyp-s-x-map smartparens-mode-map)
;; (bind-key "H-s x x" 'sp-extract-before-sexp smartparens-mode-map)
;; (bind-key "H-s x a" 'sp-extract-after-sexp smartparens-mode-map)
;; (bind-key "H-s x s" 'sp-swap-enclosing-sexp smartparens-mode-map)

;; (bind-key "C-x C-t" 'sp-transpose-hybrid-sexp smartparens-mode-map)

;; (bind-key ";" 'sp-comment emacs-lisp-mode-map)

;; (bind-key [remap c-electric-backspace] 'sp-backward-delete-char smartparens-strict-mode-map)

;; )

(use-package helpful
  :commands (helpful-at-point helpful-command)
  :bind (
         ;; Note that the built-in `describe-function' includes both functions
         ;; and macros. `helpful-function' is functions only, so we provide
         ;; `helpful-callable' as a drop-in replacement.
         ;;           ("C-h f" . #'helpful-callable)
         ;;           ("C-h v" . #'helpful-variable)
         ;;           ("C-h k" . #'helpful-key)

         ;; Lookup the current symbol at point. C-c C-d is a common keybinding
         ;; for this in lisp modes.
         ("C-c C-d" . #'helpful-at-point)

         ;; Look up *F*unctions (excludes macros).
         ;;
         ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
         ;; already links to the manual, if a function is referenced there.
         ;;         ("C-h F" . #'helpful-function)

         ;; Look up *C*ommands.
         ;;
         ;; By default, C-h C is bound to describe `describe-coding-system'. I
         ;; don't find this (vector )ery useful, but it's frequently useful to only
         ;; look at interactive functions.
         ("C-h C" . #'helpful-command)
         ))

(use-package avy
  :bind (
         ;;Input one char, jump to it with a tree
         ("C-:" . avy-goto-char)

         ;;Input two consecutive chars, jump to the first one with a tree
         ("C-'" . avy-goto-char-2)

         ;;Input an arbitrary amount of consecutive chars, jump to the first one with a tree.
         ("C-;" . avy-goto-char-timer)

         ;;Input zero chars, jump to a line start with a tree.
         ("M-g g" . avy-goto-line)

         ;;Input one char at word start, jump to a word start with a tree
         ("M-g w" . avy-goto-word-1)

         ;;Input zero chars, jump to a word start with a tree.
         ("M-g e" . avy-goto-word-0)

         ;;You add this to your config to bind some stuff:
         ("C-c C-j" . avy-resume)))

(use-package amx)

(use-package ibuffer :bind ("C-x C-b" . ibuffer))

(use-package all-the-icons :demand)

;;  (use-package all-the-icons-ivy
;;  :after (all-the-icons)
;;  :init (all-the-icons-ivy-setup))

;;;This function need for correct kill buffer throught ivy-rich
(defun q/all-the-icons-ivy-rich-kill-buffer ()
  "Kill the buffer specified by BUFFER-OR-NAME."
  (interactive)
  (ivy-read
   (format "Kill buffer (default: %s)" (buffer-name (current-buffer)))
   #'internal-complete-buffer
   :preselect (buffer-name (current-buffer))
   :action #'kill-buffer
   :caller 'q/all-the-icons-ivy-rich-kill-buffer))

(use-package all-the-icons-ivy-rich
  :commands (all-the-icons-ivy-rich-mode)
  :init (all-the-icons-ivy-rich-mode 1)

  :bind ("C-x k" . q/all-the-icons-ivy-rich-kill-buffer)

  :custom
  (all-the-icons-ivy-rich-icon-size 1.0)
  (inhibit-compacting-font-caches t)

  ;;IVY-RICH icons  format
  ;;=====================================================
  ;;    (ivy-rich-display-transformer-list)
  (all-the-icons-ivy-rich-display-transformers-list
   '(ivy-switch-buffer
     (:columns
      ((all-the-icons-ivy-rich-buffer-icon)
       (ivy-rich-candidate (:width 30))
       (ivy-rich-switch-buffer-size (:width 7))
       (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
       (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
       ;;(ivy-rich-switch-buffer-project (:width 15 :face success))
       (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
      :predicate
      (lambda (cand) (get-buffer cand))
      :delimiter "\t")
     ivy-switch-buffer-other-window
     (:columns
      ((all-the-icons-ivy-rich-buffer-icon)
       (ivy-rich-candidate (:width 30))
       (ivy-rich-switch-buffer-size (:width 7))
       (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
       (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
       ;; (ivy-rich-switch-buffer-project (:width 15 :face success))
       (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
      :predicate
      (lambda (cand) (get-buffer cand))
      :delimiter "\t")

     ;; counsel
     counsel-switch-buffer
     (:columns
      ((all-the-icons-ivy-rich-buffer-icon)
       (ivy-rich-candidate (:width 30))
       (ivy-rich-switch-buffer-size (:width 7))
       (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
       (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
       ;; (ivy-rich-switch-buffer-project (:width 15 :face success))
       (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
      :predicate
      (lambda (cand) (get-buffer cand))
      :delimiter "\t")
     counsel-switch-buffer-other-window
     (:columns
      ((all-the-icons-ivy-rich-buffer-icon)
       (ivy-rich-candidate (:width 30))
       ;;(ivy-rich-switch-buffer-size (:width 7))
       (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
       (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
       ;; (ivy-rich-switch-buffer-project (:width 15 :face success))
       (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
      :predicate
      (lambda (cand) (get-buffer cand))
      :delimiter "\t")
     counsel-M-x
     (:columns
      ((all-the-icons-ivy-rich-function-icon)
       (counsel-M-x-transformer (:width 40))
       (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
     counsel-describe-function
     (:columns
      ((all-the-icons-ivy-rich-function-icon)
       (counsel-describe-function-transformer (:width 40))
       (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
     counsel-describe-variable
     (:columns
      ((all-the-icons-ivy-rich-variable-icon)
       (counsel-describe-variable-transformer (:width 40))
       (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
     counsel-describe-symbol
     (:columns
      ((all-the-icons-ivy-rich-symbol-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-set-variable
     (:columns
      ((all-the-icons-ivy-rich-variable-icon)
       (counsel-describe-variable-transformer (:width 40))
       (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
     counsel-apropos
     (:columns
      ((all-the-icons-ivy-rich-symbol-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-info-lookup-symbol
     (:columns
      ((all-the-icons-ivy-rich-symbol-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-descbinds
     (:columns
      ((all-the-icons-ivy-rich-keybinding-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-find-file
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-read-file-transformer))
      :delimiter "\t")
     counsel-file-jump
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-dired
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-read-file-transformer))
      :delimiter "\t")
     counsel-dired-jump
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-el
     (:columns
      ((all-the-icons-ivy-rich-symbol-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-fzf
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-git
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-recentf
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate (:width 0.8))
       (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))
      :delimiter "\t")
     counsel-buffer-or-recentf
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (counsel-buffer-or-recentf-transformer (:width 0.8))
       (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))
      :delimiter "\t")
     counsel-bookmark
     (:columns
      ((all-the-icons-ivy-rich-bookmark-type)
       (all-the-icons-ivy-rich-bookmark-name (:width 40))
       (all-the-icons-ivy-rich-bookmark-info))
      :delimiter "\t")
     counsel-bookmarked-directory
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-package
     (:columns
      ((all-the-icons-ivy-rich-package-icon)
       (ivy-rich-candidate (:width 30))
       (all-the-icons-ivy-rich-package-version (:width 16 :face font-lock-comment-face))
       (all-the-icons-ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
       (all-the-icons-ivy-rich-package-install-summary (:face font-lock-doc-face)))
      :delimiter "\t")
     counsel-fonts
     (:columns
      ((all-the-icons-ivy-rich-font-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-major
     (:columns
      ((all-the-icons-ivy-rich-mode-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-find-library
     (:columns
      ((all-the-icons-ivy-rich-library-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-load-library
     (:columns
      ((all-the-icons-ivy-rich-library-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-load-theme
     (:columns
      ((all-the-icons-ivy-rich-theme-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-world-clock
     (:columns
      ((all-the-icons-ivy-rich-world-clock-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-tramp
     (:columns
      ((all-the-icons-ivy-rich-tramp-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-git-checkout
     (:columns
      ((all-the-icons-ivy-rich-git-branch-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-list-processes
     (:columns
      ((all-the-icons-ivy-rich-process-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-projectile-switch-project
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-projectile-find-file
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (counsel-projectile-find-file-transformer))
      :delimiter "\t")
     counsel-projectile-find-dir
     (:columns
      ((all-the-icons-ivy-rich-project-icon)
       (counsel-projectile-find-dir-transformer))
      :delimiter "\t")
     counsel-minor
     (:columns
      ((all-the-icons-ivy-rich-mode-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-imenu
     (:columns
      ((all-the-icons-ivy-rich-imenu-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-cd
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     counsel-company
     (:columns
      ((all-the-icons-ivy-rich-company-icon)
       (ivy-rich-candidate))
      :delimiter "\t")

     ;; pkacage
     package-install
     (:columns
      ((all-the-icons-ivy-rich-package-icon)
       (ivy-rich-candidate (:width 30))
       (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
       (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
       (ivy-rich-package-install-summary (:face font-lock-doc-face)))
      :delimiter "\t")
     package-reinstall
     (:columns
      ((all-the-icons-ivy-rich-package-icon)
       (ivy-rich-candidate (:width 30))
       (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
       (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
       (ivy-rich-package-install-summary (:face font-lock-doc-face)))
      :delimiter "\t")
     package-delete
     (:columns
      ((all-the-icons-ivy-rich-package-icon)
       (ivy-rich-candidate))
      :delimiter "\t")

     ;; persp-switch-to-buffer
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-buffer-icon)
     ;;   (ivy-rich-candidate (:width 30))
     ;;   (ivy-rich-switch-buffer-size (:width 7))
     ;;   (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
     ;;   (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
     ;;   (ivy-rich-switch-buffer-project (:width 15 :face success))
     ;;   (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
     ;;  :predicate
     ;;  (lambda (cand) (get-buffer cand))
     ;;  :delimiter "\t")
     ;; persp-switch
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-project-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-frame-switch
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-project-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-window-switch
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-project-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-kill
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-project-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-save-and-kill
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-project-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-import-buffers
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-project-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-import-win-conf
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-project-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-kill-buffer
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-buffer-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-remove-buffer
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-buffer-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")
     ;; persp-add-buffer
     ;; (:columns
     ;;  ((all-the-icons-ivy-rich-buffer-icon)
     ;;   (ivy-rich-candidate))
     ;;  :delimiter "\t")

     q/all-the-icons-ivy-rich-kill-buffer
     (:columns
      ((all-the-icons-ivy-rich-buffer-icon)
       (ivy-rich-candidate))
      :delimiter "\t")

     treemacs-projectile
     (:columns
      ((all-the-icons-ivy-rich-file-icon)
       (ivy-rich-candidate))
      :delimiter "\t")
     )))

(use-package all-the-icons-ibuffer
:after ibuffer
:commands (all-the-icons-ibuffer-mode)
:init (all-the-icons-ibuffer-mode))

(use-package all-the-icons-dired 
  :after (all-the-icons dired)
  :hook (dired-mode . all-the-icons-dired-mode))

;;(use-package treemacs-all-the-icons
;;:after treemacs)

;;  (use-package treemacs-icons-dired
;;    :demand
;;    :after (treemacs dired)
;;    :config (treemacs-icons-dired-mode))

(use-package posframe)

;;  (use-package ivy-posframe
;;    :init
;;    ;; display at `ivy-posframe-style'
;;    (setq ivy-posframe-display-functions-alist
;;          '((swiper-isearch  . ivy-display-function-fallback)
;;            (swiper-backward . ivy-display-function-fallback)
;;            (complete-symbol . ivy-posframe-display-at-point)
;;            ;;(counsel-M-x     . ivy-posframe-display-at-window-bottom-left)
;;            (t               . ivy-posframe-display)))
;;
;;    (ivy-posframe-mode 1))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))

;; (use-package dired-posframe
;;   :hook (dired-mode . dired-posframe-mode))



(use-package fzf)

(use-package flx)

(use-package wgrep)

;;(use-package phi-search)

;;(use-package phi-replace)

(use-package region-bindings-mode
  :commands (region-bindings-mode-enable)
  ;;To think about hooks for program modes
  :init (region-bindings-mode-enable))

(use-package multiple-cursors
  :after (region-bindings-mode)
  :init (multiple-cursors-mode)
  :bind 
  (:map region-bindings-mode-map 
	(("a" . mc/mark-all-like-this)
	 ("p" . mc/mark-previous-like-this)
	 ("n" . mc/mark-next-like-this)
	 ("m" . mc/mark-more-like-this-extended))))

(use-package edit-server
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 300)
                  (left . 300)
                  (width . 50)
                  (height . 15)
                  (minibuffer . t)
;;                  (menu-bar-lines . x ;TODO: )
                  (window-system . x))))

(use-package paradox)

(use-package magit)

;;===================================================================
;;TREEMACS
(use-package treemacs
  :defer t
  :commands (treemacs-follow-mode
             treemacs-filewatch-mode
             treemacs-fringe-indicator-mode
             treemacs-git-mode)
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      2.0
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.7 
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   1
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-read-string-input             'from-child-frame
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              3.0
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         25
          treemacs-workspace-switch-cleanup      nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind (("M-1"       . treemacs-select-window)
         ("C-x t 1"   . treemacs-delete-other-windows)
         ("C-x t t"   . treemacs)
         ("C-x t B"   . treemacs-bookmark)
         ("C-x t C-t" . treemacs-find-file)
         ("C-x t M-t" . treemacs-find-tag)
	 (:map treemacs-mode-map
               ("C-n" . treemacs-next-neighbour)
               ("C-p" . treemacs-previous-neighbour))))
;;     ([mouse-1] . #'treemacs-single-click-expand-action))



(use-package treemacs-projectile
  :after treemacs projectile)



(use-package treemacs-magit
  :after treemacs magit)


;;(use-package treemacs-evil
;;  :after treemacs evil
;;  :ensure t)

;;(use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
;;  :after treemacs persp-mode ;;or perspective vs. persp-mode
;;  :config (treemacs-set-scope-type 'Perspectives))

(load (q/get-config-file "projectile-discovery.el"))
(use-package projectile
  :demand
  :init (projectile-mode +1)
  :custom
  (projectile-complection-system 'ivy)
  (projectile-indexing-method 'hybrid)
  (projectile-sort-order 'recentf)
  (projectile-track-known-projects-automatically nil)
  (projectile-auto-discover nil)
  
  :bind (:map projectile-mode-map
	      ("M-<f1>" . projectile-command-map)
	      ("C-c p" . projectile-command-map) 
	      ("M-p" . projectile-command-map))
  :config
  ;;Add paths for autodiscover projects at start
  
  (setq projectile-project-search-path (list q/projects-directory q/sources-directory)
	;;Config filteres by next link
	;;https://gitlab.com/skybert/my-little-friends/blob/master/emacs/.emacs#L603
	projectile-globally-ignored-file-suffixes
	'("blob" "class" "classpath" "gz" "iml" "ipr" "jar" "pyc" "tkj" "war" "xd" "zip")

	projectile-globally-ignored-directories
	(append (list
		 "build.*" "elpa.*" "node_modules" "output" "target.*" "straight" "repos"
		 "venv" "semanticdb" "reveal.js" "__pycache__" ".pytest_cache" "cache.*"
		 "package.*")
                projectile-globally-ignored-directories)
	))

(use-package counsel-projectile
  :hook (after-init . counsel-projectile-mode))

;;(use-package ibuffer-projectile)

(use-package origami

  :init (origami-mode 1)
  :bind (:map origami-mode-map
              ("M-<f1>" . origami-toggle-node)
              ("M-<f2>" . origami-toggle-all-nodes)))

(use-package lsp-mode
  :hook (lsp-mode . lsp-enable-which-key-integration)
  :custom (lsp-completion-enable-additional-text-edit nil))

(use-package lsp-ui :commands lsp-ui-mode)

(use-package lsp-java :hook (java-mode . lsp))

(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

;;(use-package helm 
;;:config (helm-mode))

;;(use-package helm-lsp)

(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

(use-package flycheck
  :init
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.15)))
  :hook 
  (after-init . global-flycheck-mode)

  :custom
  (flycheck-emacs-lisp-load-path 'inherit)
  ;;  (flycheck-emacs-lisp-load-path ())
  (flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

(use-package dap-mode 
:after lsp-mode
:config (dap-auto-configure-mode))

;;(use-package slime)

;;(use-package geiser)

(use-package realgud)

;; (defun fix-org-git-version ()
;;   "The Git version of org-mode.
;;   Inserted by installing org-mode or when a release is made."
;;   (require 'git)
;;   (let ((git-repo (expand-file-name
;;                    "straight/repos/org/" user-emacs-directory)))
;;     (string-trim
;;      (git-run "describe"
;;               "--match=release\*"
;;               "--abbrev=6"
;;               "HEAD"))))

;; (defun fix-org-release ()
;;   "The release version of org-mode.
;;   Inserted by installing org-mode or when a release is made."
;;   (require 'git)
;;   (let ((git-repo (expand-file-name
;;                    "straight/repos/org/" user-emacs-directory)))
;;     (string-trim
;;      (string-remove-prefix
;;       "release_"
;;       (git-run "describe"
;;                "--match=release\*"
;;                "--abbrev=0"
;;                "HEAD")))))

;;Config org-mode
(use-package org
  :after (delight)
  :commands (org-open-at-point org-babel-tangle-file org-toggle-pretty-entities)

  :delight (org-mode "ORG")

  ;;KEY BINDINGS
  :bind (("C-c l" . org-store-link))        ;;Following or set links

  ;;Unset unneeded default keybindings
  :hook (org-mode . (lambda () (local-unset-key (kbd "C-'"))))
  :hook (org-babel-after-execute . q/org-open-at-point)

  :custom
  (org-startup-indented t)
  (org-startup-folded t)
  (org-hide-block-startup nil)
  (org-startup-with-inline-images nil)
  (org-startup-with-beamer-mode t)
  (org-hide-leading-stars t)
  (org-hide-emphasis-markers t)
  (org-src-preserve-indentation nil) 
  (org-edit-src-content-indentation 0)
  (org-src-tab-acts-natively t)
  ;;Toggle hide results Hide all results 
  ;;(add-hook 'org-mode-hook 'org-babel-result-hide-all)

  ;;Disable confirm evalute code blocks
  (org-confirm-babel-evaluate nil)

  ;;Whole window for edit src 
  (org-src-window-setup 'current-window)  

  :config
  ;;add redisplay inline images
  (defun q/org-open-at-point ()
    (org-open-at-point)
    (other-window 1))

  (delight '((org-indent-mode "ⓘ" org-indent) 
             (org-beamer-mode "ⓑ" ox-beamer)))

  ;;Toggle \*** to UTF-8
  ;;Toggle visual line mode for org
  ;;:commands (org-babel-result-hide-all)
  (org-toggle-pretty-entities)

  ;;BABEL configure
  ;;load languages for babel mode in orgmode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((java . t)
     (emacs-lisp.t))))

(use-package org-bullets
    :after (org org-journal)
    :diminish
    :hook (org-mode . org-bullets-mode))

(use-package org-download
  :straight t
  :after (org))

(use-package org-journal
     :after(org)
;;     :delight (org-journal "ORG")
     :custom
     (org-journal-dir (concat (file-name-as-directory org-directory) "journal"))
     (org-journal-file-format "%Y/%m/%Y%m%d.journal")
     (org-journal-date-format "%A, %Y-%m-%d")
  ;;   (org-journal-encrypt-journal t)
  ;;   (org-journal-enable-encryption nil)
     (org-journal-enable-agenda-integration t)
     :bind
     ("C-c j" . org-journal-new-entry))



(use-package pandoc-mode
  :commands (pandoc-load-default-settings)
  :hook (pandoc-mode . pandoc-load-default-settings))

(use-package markdown-mode
  :after (pandoc-mode)
  :commands (markdown-mode gfm-mode)
  :mode 
  ("README\\.md\\'" . gfm-mode)
  ("\\.md\\'" . markdown-mode)
  ("\\.markdown\\'" . markdown-mode)
  :hook
  (markdown-mode . pandoc-mode)
  (gfm-mode . pandoc-mode)
  :custom
  (markdown-header-scaling t))

(use-package plantuml-mode
  :after (org)
  ;;Enable plantuml-mode for PlantUML files
  :mode ("\\.puml\\'" . plantuml-mode)

  :custom
  ;;active org-babel languages
  (org-plantuml-jar-path (expand-file-name "/usr/share/java/plantuml/plantuml.jar"))

  ;;Enable exec mode to jar
  (plantuml-default-exec-mode 'jar)
  ;;Point to backend
  (plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")

  ;;Outut type
  (plantuml-output-type "png")

  ;;Indent parameters
  (plantuml-indent-level 4)

  ;;ORG-BABEL-INTEGRATION
  ;;add plantuml to orgmode
  :config
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))

  ;;load languages for babel mode in orgmode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t))))

(use-package company
  :diminish 

  ;;start company mode after init of emacs
  :hook
  (after-init . global-company-mode)

  :bind
  (:map
   company-active-map
   ("M-n" . company-select-next)
   ("M-p" . company-select-previous))


  :config
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-limit 7)
  (setq company-show-numbers nil)
  (setq company-tooltip-idle-delay 0.3))

(use-package company-box
  :hook (company-mode . company-box-mode))

(use-package ivy
    :demand
    :hook (after-init . ivy-mode)
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-re-builders-alist
     '((counsel-find-file . ivy--regex-plus)
       (counsel-describe-function . ivy--regex-plus)
       (counsel-describe-variable . ivy--regex-plus)
       (counsel-M-x . ivy--regex-plus)
       (swiper-isearch  . ivy--regex-plus)
       (counsel-outline . ivy--regex-plus)
       (t . ivy--regex-plus)))

    :bind 
    ;;Ivy-based interface to standard commands
    (("C-x b" . ivy-switch-buffer)
     ("C-c v" . ivy-push-view)
     ("C-c V" . ivy-pop-view)
     ;;Ivy-resume and other commands
     ("C-c C-r" . ivy-resume)
     ("<f6>" . ivy-resume)))

(use-package counsel
    :after ivy
    :hook (ivy-mode . counsel-mode)
    :bind
    ;;Ivy-based interface to standard commands
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("M-y" . counsel-yank-pop)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f1> l" . counsel-find-library)
     ("<f2> i" . counsel-info-lookup-symbol)
     ("<f2> u" . counsel-unicode-char)
     ("<f2> j" . counsel-set-variable)

     ;;Ivy-based interface to shell and system tools
     ("C-x l" . counsel-locate)
     ("C-c c" . counsel-compile)
    ;; ("C-c g" . counsel-git)
    ;;("C-c j" . counsel-git-grep)
    ;;("C-c L" . counsel-git-log)
     ("C-c k" . counsel-ag)
     ("C-c m" . counsel-linux-app)
     ("C-c n" . counsel-fzf)
     ("C-c J" . counsel-file-jump)
     ("C-S-o" . counsel-rhythmbox)
     ("C-c w" . counsel-wmctrl)

     ;;Ivy-resume and other commands
     ("C-c b" . counsel-bookmark)
     ("C-c d" . counsel-descbinds)
     ("C-c o" . counsel-outline)
     ("C-c t" . counsel-load-theme)
     ("C-c F" . counsel-org-file))

     :bind 
     (:map minibuffer-local-map ("C-r" . counsel-minibuffer-history))
  
    :custom
    (counsel-outline-face-style 'org)
    (counsel-outline-path-separator " » ")
    (counsel-org-headline-display-todo t)
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    (counsel-describe-symbol-function #'helpful-symbol))

(use-package swiper
  :after (ivy)
  :custom 
  (swiper-verbose nil)
  (swiper-use-visual-line t)

  :bind
  ;;Ivy-based interface to standard commands
  ("C-s" . swiper-isearch)
  ("C-r" . swiper-isearch-backward))

(use-package ivy-hydra)

(use-package ivy-rich
 :after (ivy counsel counsel-projectile)
 :init (ivy-rich-mode)
 :config
 (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
 (ivy-rich-project-root-cache-mode 1)

 :custom
 (ivy-rich-path-style 'addrev))

   ;; ivy--display-transformers-alist
   ;; ((package-install . ivy-rich--package-install-transformer)
   ;; 	(counsel-bookmark . ivy-rich--counsel-bookmark-transformer)
   ;; 	(counsel-recentf . ivy-rich--counsel-recentf-transformer)
   ;; 	(counsel-find-file . ivy-rich--counsel-find-file-transformer)
   ;; 	(ivy-switch-buffer . ivy-rich--ivy-switch-buffer-transformer)
   ;; 	(counsel-projectile . counsel-projectile-transformer)
   ;; 	(counsel-projectile-grep . counsel-git-grep-transformer)
   ;; 	(counsel-projectile-switch-to-buffer . counsel-projectile-switch-to-buffer-transformer)
   ;; 	(counsel-projectile-find-dir . counsel-projectile-find-dir-transformer)
   ;; 	(counsel-projectile-find-file . counsel-projectile-find-file-transformer)
   ;; 	(counsel-fonts . counsel--font-with-sample)
   ;; 	(counsel-rg . counsel-git-grep-transformer)
   ;; 	(counsel-pt . counsel-git-grep-transformer)
   ;; 	(counsel-ag . counsel-git-grep-transformer)
   ;; 	(counsel-tracker . counsel-tracker-transformer)
   ;; 	(counsel-buffer-or-recentf . counsel-buffer-or-recentf-transformer)
   ;; 	(counsel-git-grep . counsel-git-grep-transformer)
   ;; 	(counsel-M-x . ivy-rich--counsel-M-x-transformer)
   ;; 	(counsel-describe-function . ivy-rich--counsel-describe-function-transformer)
   ;; 	(counsel-describe-variable . ivy-rich--counsel-describe-variable-transformer)
   ;; 	(counsel-company . counsel--company-display-transformer)
   ;; 	(ivy-yasnippet . ivy-yasnippet-transformer)
   ;; 	(internal-complete-buffer . ivy-switch-buffer-transformer)
   ;; 	(read-file-name-internal . ivy-read-file-transformer))



(use-package yasnippet
  :after delight
  :delight (yas-minor-mode "ⓨ")
  :config  
  (setq yas-wrap-around-region t)
  (yas-global-mode))

(use-package yasnippet-snippets)

;;  (use-package maxima)

(use-package diminish)
(use-package delight)

;;MODELINE config
;;===============================================================
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom (doom-modeline-buffer-file-name-style 'relative-to-project))

(use-package which-key
  :delight 
  (which-key-mode "ⓚ")
  :config 
  (which-key-mode)
  :custom 
  (which-key-side-window-max-height 0.4)
  ;; sort single chars alphabetically P p Q q
  (which-key-sort-order 'which-key-key-order-alpha))

;;(use-package hydra)

(use-package major-mode-hydra)

(use-package command-log-mode
  :custom
  (command-log-mode-key-binding-open-log "<f12>"))

;;EMACS THEMES
;;===============================================================
(use-package doom-themes 
:init (load-theme 'doom-dracula t))

(use-package rainbow-mode
  :init (rainbow-mode 1))

;; Functions for random set color for
;;=====================================================================================
(require 'color)
(defun gen-col-list (length s v &optional hval)
  (cl-flet ( (random-float () (/ (random 10000000000) 10000000000.0))
          (mod-float (f) (- f (ffloor f))) )
    (unless hval
      (setq hval (random-float)))
    (let ((golden-ratio-conjugate (/ (- (sqrt 5) 1) 2))
          (h hval)
          (current length)
          (ret-list '()))
      (while (> current 0)
        (setq ret-list
              (append ret-list
                      (list (apply 'color-rgb-to-hex (color-hsl-to-rgb h s v)))))
        (setq h (mod-float (+ h golden-ratio-conjugate)))
        (setq current (- current 1)))
      ret-list)))

(defun set-random-rainbow-colors (s l &optional h)
  ;; Output into message buffer in case you get a scheme you REALLY like.
  ;; (message "set-random-rainbow-colors %s" (list s l h))
  (interactive)
  (rainbow-delimiters-mode t)

  ;; Show mismatched braces in bright red.
  (set-face-background 'rainbow-delimiters-unmatched-face "red")

  ;; Rainbow delimiters based on golden ratio
  (let ( (colors (gen-col-list 9 s l h))
         (i 1) )
    (let ( (length (length colors)) )
      ;;(message (concat "i " (number-to-string i) " length " (number-to-string length)))
      (while (<= i length)
        (let ( (rainbow-var-name (concat "rainbow-delimiters-depth-" (number-to-string i) "-face"))
               (col (nth i colors)) )
          ;; (message (concat rainbow-var-name " => " col))
          (set-face-foreground (intern rainbow-var-name) col))
        (setq i (+ i 1))))))

(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :init
  (setq rainbow-delimiters-max-face-count 16)
 (set-random-rainbow-colors 0.6 0.7 0.5)
  :hook
  (prog-mode . rainbow-delimiters-mode))

(use-package dashboard
  :config
  (dashboard-setup-startup-hook))

(setq gc-cons-threshold (* 2 1000 1000))
