#+begin_src emacs-lisp :exports none
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file located at
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

#+RESULTS:

#+title: My Emacs config file
#+author: Sergey Tugaenko
#+email: qventeen@gmail.com

* perform (begin)
[[https://github.com/zzamboni/dot-emacs/blob/master/init.org#performance-optimization][Link to this dot file]]
Couple of useful resources for invoke optimization
- [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][Two easy little known steps to speed up Emacs start up time]]
- [[https://blog.d46.us/advanced-emacs-startup/][Advanced Techniques for Reducing Emacs Startup Time]]
Next, a hook that reports how long and how many garbage collections the startup took. We use a hook to run it at the very end, so the message doesn't get clobbered by other messages during startup.
#+BEGIN_SRC emacs-lisp
  (defun q/test-time-load ()
    (message "Emacs ready in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'q/test-time-load)
#+END_SRC

We set =gc-cons-threshold= to its maximum value, to prevent any garbage collection from happening during load time. We also reset this value in the [[Epilogue][Epilogue]].
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+END_SRC
* init
** butstrap module
This module initialize startup package management
#+NAME: initial package managament system
#+BEGIN_SRC emacs-lisp
;;Initial Package manager
;;===============================================================
(setq package-enable-at-startup nil)

;;Add repositories
(setq package-archives
      '(("elpa" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")))



;;Butstrap setup straight pakcage manager
;;================================================================
(defvar bootstrap-version)
(defvar straight-process-buffer " *straight-p*")
(defvar straight-whatcher-process-buffer " *straight-w*")

;;straight fix for flycheck
(defvar straight-fix-flycheck t)

;;straight fix for org
(defvar straight-fix-org t)

;;Set stright for work with use-package
(defvar straight-use-package-by-default 1)


(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
** use-package configure
[[https://github.com/xendk/dotemacs/blob/master/init.el][Solution of problem with flycheck and Straight]]
#+NAME: use-package configure
#+BEGIN_SRC emacs-lisp

  ;;https://github.com/xendk/dotemacs/blob/master/init.el
  ;;===========================================================================
  ;; Ensure that flycheck can see that straight will be available for
  ;; the straight-register-package.
  (eval-and-compile
    (require 'straight))
  ;;Install-use package
  (straight-use-package 'use-package)


  ;; Bootstrap `use-package'
  ;; Emacs 26 doesn't seem to know that it has nadvice.
  ;; (customize-set-variable 'straight-built-in-pseudo-packages (quote (emacs python nadvice)))

  ;; When flycheck checks this file it needs use-package (and straight
  ;; above) loaded to understand the use-package forms. Also the reason
  ;; for the flycheck-emacs-lisp-load-path on the first line of the
  ;; file.
  (eval-and-compile (require 'use-package))

  (use-package use-package
    :ensure nil
    :custom
    (use-package-always-ensure nil)
    (use-package-verbose t))
  ;;===========================================================================
#+END_SRC
** init gen (regenarate after change)
#+NAME: autogen init.el
#+BEGIN_SRC emacs-lisp
;;This function load init.el from init.org when file is modifed
(defun q/load-init-from-org ()
  (let ((init-org-file (concat user-emacs-directory "init.org")))
    (if (file-newer-than-file-p init-org-file user-init-file)
        ;;(org-babel-load-file init-org-file)
        (org-babel-tangle-file
         init-org-file
         user-init-file
         "emacs-lisp\\|elisp"))))


(add-hook 'kill-emacs-hook #'q/load-init-from-org)
#+END_SRC
** custom file
Emacs has own customized mechanizm for customising
many differend parameters. This mode keeps my init file clean
#+BEGIN_SRC emacs-lisp
  (setq custom-file (make-temp-file ""))
#+END_SRC
** general dependencies
#+BEGIN_SRC emacs-lisp
(require 'cl-lib)
(require 'seq)
(use-package f :demand t)        ;;files
(use-package dash :demand t)     ;;lists
(use-package ht :demand t)       ;;hash-tables
(use-package s :demand t)        ;;strings
(use-package a :demand t)        ;;assotiation lists
(use-package anaphora :demand t) ;;anaphora
(use-package org :demand t)        ;;org

;;very usable package for hydra integration
;;add integration to use-package
(use-package pretty-hydra :demand t)     ;;add :pretty-hydra keyword to use-pakcage
(use-package major-mode-hydra :demand t) ;;add :mode-hydra keyword to use-package

#+END_SRC
** local settings (current machine)
*** linux-paths
#+NAME: linux-paths
#+BEGIN_SRC emacs-lisp
(defvar q/home-directory (expand-file-name "~/"))
(defvar q/data-directory (concat q/home-directory ".emacs.d/"))
(defvar q/config-directory (concat q/data-directory "configs/"))
(defvar q/projects-directory (concat q/home-directory "projects/"))
(defvar q/sources-directory (concat q/home-directory "src/"))
(defvar q/org-directory (concat q/home-directory "org/"))
(defvar q/yas-directory (concat q/data-directory "yasnippet/"))

#+END_SRC
*** windows-paths
On future
#+NAME: windows-pahts
#+BEGIN_SRC emacs-lisp
(when (string-equal system-type "windows-nt")
  (setq q/home-directory (expand-file-name "d:/"))
  (setq q/data-directory (concat q/home-directory "Emacs/"))
  (setq q/projects-directory (concat q/home-directory "projects/"))
  (setq q/sources-directory (concat q/home-directory "src/"))
  (setq q/org-directory (concat q/home-directory "org/"))
  (setq q/yas-directory (concat q/data-directory "yasnippet/")))
#+END_SRC
*** boilerplate
Calculate file paths relative to various locations.
**** q/get-org-file
#+BEGIN_SRC emacs-lisp
  (defun q/get-org-file (file-name)
    (concat q/org-directory file-name))
#+END_SRC
**** q/get-config-file
#+BEGIN_SRC emacs-lisp
(defun q/get-config-file (file-name)
  (concat q/config-directory file-name))
#+END_SRC
**** q/get-project-directory
#+BEGIN_SRC emacs-lisp
  (defun q/get-project-directory (name)
    (concat q/projects-directory name))
#+END_SRC
**** q/get-source-directory
#+BEGIN_SRC emacs-lisp
  (defun q/get-source-directory (name)
    (concat q/sources-directory name))
#+END_SRC
*** data-paths
#+NAME: data-pathes
#+BEGIN_SRC emacs-lisp
  ;;org files
  (defvar q/notes-file-name (q/get-org-file "notes/notes.org") "Main notes file-name")
  (defvar q/bookmarks-file-name (q/get-org-file "bookmarks/bookmarks.org") "Main bookmarks file-name")

  ;;storages dir
  (defvar q/autosaves-directory (concat q/data-directory "autosaves/") "Main autosaves directory")
  (defvar q/backups-directory (concat q/data-directory "backups/") "Main backups directory")
#+END_SRC
*** external-browser
#+NAME: defoult-browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "google-chrome-stable")
#+END_SRC
*** midifier-key-bind
This page shows you how to define Super and Hyper keys in emacs
[[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][XanEmacs tutorial bind]]
* fixes
** package cl deprecated
Emacs 27 and onward deprecates the built-in cl library (to be replaced with cl-lib). Emacs emits this warning whenever something, somewhere loads it at runtime. Doom does not use cl, but a number of 3rd party packages do, which is outside my control. Emacs offers no method to suppress the error and neither can Doom (trivially). Our only options are to ignore it and wait for packages upstream to catch up, or PR updates to those packages directly.
[[https://emacs.stackexchange.com/questions/58489/how-do-i-debug-package-cl-is-deprecated][Solve cl deprecated]]
#+NAME: fix-cl-deprecated
#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(cl-functions))

#+END_SRC
* built-in
** major
*** frames
**** disasble gui elements
#+BEGIN_SRC emacs-lisp
  ;;Отключить менюшки
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tab-bar-mode -1)
  (setq use-dialog-box nil)

  ;;Заблокировать стандартное стартовое окно
  (setq inhibit-startup-message t)

  ;;Большое окно при старте
  (toggle-frame-maximized)
#+END_SRC
**** font settings
#+BEGIN_SRC emacs-lisp
;;Default font
(add-to-list 'default-frame-alist
;;'(font . "Comic Sans MS-14")
;;'(font . "Hack-14")
'(font . "JetBrains Mono-16"))
#+END_SRC
*** display
**** visual-line-mode
This mode has little performance. Instead I use visual-fill-mode
#+NAME: global-visual-mode
#+BEGIN_SRC emacs-lisp
;;(global-visual-line-mode 1)
;;(add-hook 'text-mode-hook '(lambda () (visual-line-mode 1)))
#+END_SRC
**** useless whitespace
#+NAME: whitespace-line-column
#+BEGIN_SRC emacs-lisp
;; Longer whitespace, otherwise syntax highlighting is limited to default column
(setq whitespace-line-column 500)
#+END_SRC
*** windows
**** ace-window
Super Super coole tool
GNU Emacs package for selecting a window to switch to
[[https://github.com/abo-abo/ace-window][Ace-window Github]]

#+NAME: ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:bind 
("M-o" . ace-window)
:custom
(aw-dispatch-always t))
#+END_SRC
**** windmove keybindings
#+BEGIN_SRC emacs-lisp
;;winmove-mode переключает фокус расположенные рядом открытые окна
;;(windmove-default-keybindings 'control)
#+END_SRC
**** store work session
#+BEGIN_SRC emacs-lisp
;;Сохранение рабочей сессии
(desktop-save-mode 1)
#+END_SRC
**** yes-or-no -> y-or-n
#+BEGIN_SRC emacs-lisp
;;replace yes-or-no-p -> y-or-n-p
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
**** modeline
#+BEGIN_SRC emacs-lisp
  ;;Включить нумерацию колонок
  (column-number-mode 1)
#+END_SRC
**** region control
#+BEGIN_SRC emacs-lisp
  ;;Включить возможность преобразования 
  ;;Региона в символы верхнего и нижнего регистра
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+END_SRC
*** files
**** autosaves
#+NAME: autosaves
#+BEGIN_SRC emacs-lisp
  ;;toggle in autosave
  (setq auto-save-default t)

  ;;save every 60 sec or 60 keystroke 
  (setq auto-save-timeout 60)
  (setq auto-save-interval 60)

  ;;keep autosaves in one place
  (unless (file-exists-p q/autosaves-directory)
    (make-directory q/autosaves-directory))

  (setq auto-save-file-name-transforms
      `((".*" ,q/autosaves-directory t)))

  (setq create-lockfiles nil)

  ;;Delete files to trash
  (setq delete-by-moving-to-trash t)
#+END_SRC
**** backups
Backups are created everytime a buffer is manually saved.
#+NAME: backups
#+BEGIN_SRC emacs-lisp
  ;;backup every save
  (use-package backup-each-save
    :hook (after-save . backup-each-save))

  ;;keep 10 backups
  (setq kept-new-versions 10)

  ;;delete old backups
  (setq delete-old-versions t)

  ;;copy files to avoid various problems
  (setq backup-by-copying t)

  ;;backup files even if version controlled
  (setq vc-make-backup-files t)

  ;;keep backups in a single place
  (unless (file-exists-p q/backups-directory)
    (make-directory q/backups-directory))

  (setq backup-directory-alist
        `((".*" . ,q/backups-directory)))

  (setq make-backup-files t)
#+END_SRC
**** autorevert
#+BEGIN_SRC emacs-lisp
  (setq revert-without-query '("\\.png"))
#+END_SRC
**** codepages
#+BEGIN_SRC emacs-lisp
  (setq revert-without-query '("\\.png"))
#+END_SRC
*** international
**** coding chars
Insert chars for 10-x number
#+BEGIN_SRC emacs-lisp
;;C-q quoted-insert = 10 radix
(setq read-quoted-char-radix 10)
#+END_SRC
**** language environments
***** notes
Стандартный и лучший вариант UTF-8
M-x set-language-environments
Переменная
current-language-environment t
****** Usefull hooks
set-language-environment-hook
Позволяет настроить выбранное языковое пространство
команда установки языковой среды вызывает данный хук после
собственно установки среды

exit-language-environment-hook
Нужен для отмены установленных в предыдущем хуке изменений
***** code
#+NAME: language settings
#+BEGIN_SRC emacs-lisp
;; UTF-8 as default encoding
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8-unix)

;; add this especially on Windows, else python output problem
(set-terminal-coding-system 'utf-8-unix)

#+END_SRC
**** coding usage
#+NAME: language settings
#+BEGIN_SRC emacs-lisp
;; UTF-8 as default encoding
(modify-coding-system-alist 'file "" 'utf-8-unix)
#+END_SRC
**** inputs methods
M-x set-input-method (Ukrania or Russian)
Позволяет выбирать любой метод ввода
Думаю удобно привязать переключение метода ввода
К определенной клавише
** advance
*** indendation
#+BEGIN_SRC emacs-lisp
;;Задаем ширину отступа в четыре пробела
(setq tab-width 4)
(setq tab-stop-list (quote (0 4 8)))
#+END_SRC
*** text
**** filling
wrap linus at 79 characters
#+NAME: fill-column
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
#+END_SRC
**** latex mode
Базовый режим для работы с Latex для более удобной
работы лучше использовать AUCTEX
PDF setting
  ;;(setq latex-run-command "latex")
  ;;(setq tex-print-file-extension ".dvi")
  ;;(setq tex-dvi-view-command "xdvi")
  ;;(setq tex-dvi-print-command "lpr")
  
*** building programm
**** interaction
Setup initial scratch message to nil
#+BEGIN_SRC emacs-lisp
(use-package emacs
:config
  (setq initial-scratch-message "")
;;  (initial-buffer-choice t)
  (setq initial-major-mode 'lisp-interaction-mode))
  
#+END_SRC
** minor
*** auto fill mode
Выполняет автоматическое заполнение буффера строками нужной ширины.

Fill and auto fill text in buffer 
(auto-fill-mode 1) 
включает режим в текущем буфере 

fill-column 
Переменная которая содержит ширину заполнения (70 по умолчанию).

C-x f (set-fill-column) устанавливаем ширину строки для заполнения. 
M-o M-s (center-line) центрирование строки в рамках текущей ширины
строки.  Доступно в Текстовом режиме и родственных ему.

устанавливаем префикс для заполнения
C-x . (set-fill-prefix) 
*** prettify-symbols-mode
Replace various symbols with nice looking unicode glyphs
#+NAME: prettify-simbols-mode
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode +1)
#+END_SRC
*** electric modes
**** electric-quote
Переменные для упавления вставки кавычек.

electric-quote-paragraph
electric-quote-comment
electric-quote-string
electric-quote-chars

Авто замена кавычек на изогнутые при вводе апострофа

(electric-quote-local-mode 1)
(electric-quote-mode 1)
**** electric-pair
Automatically insert matching close-brackets for any open bracket
#+NAME: electric-pair-mode
#+BEGIN_SRC emacs-lisp
;;  (electric-pair-mode 1) 
#+END_SRC

*** show-paren-mode
#+NAME: show-paren-mode
#+BEGIN_SRC emacs-lisp
(use-package paren
  :commands (show-paren-mode)
  :hook (after-init . show-paren-mode)
  :custom
  (show-paren-delay 0)
  :config
  (set-face-foreground 'show-paren-match "green4")
  (set-face-foreground 'show-paren-mismatch "#f00")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
  (set-face-attribute 'show-paren-mismatch nil :weight 'extra-bold))
#+END_SRC
*** flyspell mode
Additional mode including dynamic spelling check according to dictionary settings for ispell programm
#+NAME: flyspell
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** winner mode
winner-mode записывает изменения конфигурации окон
позволяет перемещятся undo redo по изменениям

*** wich function mode
Даный режим показывает название функции в которой
сейчас находится указатель в mode line
#+BEGIN_SRC emacs-lisp
;;(which-function-mode)
#+END_SRC

*** linum-mode
Даный режим запускает отображение номеров строк
#+BEGIN_SRC emacs-lisp
  ;;Включить относительную нумерацию строк
  ;;(setq display-line-numbers-type (quote relative))
  ;; Включить последовательную нумерацию строк
  ;;(setq display-line-numbers-type (quote t))

  ;;Отображает номера строк на дисплее
  ;;(global-display-line-numbers-mode)
#+END_SRC
*** autocomplete
**** ido-mode
Interactive Do package
Дополняет и раскрашивает ввод при поиске файлов 

**** icomplete-mode 
Даный режим позволяет выполнять интерактивное автодополнение в
минибуфере 

* ext
** TODO general
*** visual-fill-column
[[https://github.com/joostkremers/visual-fill-column][Visual-fill-column on Github]]
#+NAME: visual-fill-column
#+BEGIN_SRC emacs-lisp
;;Adding visual fill column to text modes.
;;This minor mode wrap lines at fill-column instead endge of screen
;;(use-package visual-fill-column
;;  :hook (text-mode . visual-fill-column-mode))
#+END_SRC
Is a small Emacs minor mode that mimics the effect of fill-column in visual-line-mode. Instead of wrapping lines at the window edge, which is the standard behaviour of visual-line-mode, it wraps lines at fill-column. If fill-column is too large for the window, the text is wrapped at the window edge. Told in images, visual-fill-column turns the view on the left into the view on the right, without changing the contents of the file
*** TODO smartparens
Smartparens is minor mode for Emacs that deals with parens pairs
and tries to be smart about it. 
[[https://github.com/Fuco1/smartparens][Smartparens Github]]
[[https://smartparens.readthedocs.io/en/latest/index.html][Smartprens HomePage]]
**** base
#+NAME: smartparent
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config
  (require 'smartparens-config)
  ;;(progn (show-smartparens-global-mode t))
  :hook
  (after-init . turn-on-smartparens-mode)
  (prog-mode . turn-on-smartparens-strict-mode))
#+End_SRC

**** bindings
[[https://ebzzry.io/en/emacs-pairs/][Smartparens Manual]]
[[https://gist.github.com/jsmestad/1059d15e8debf5f2e7e81c92052c67d2][Smartparens cheatsheet GitHub]]

Experimental test of keybindings. This bindings i taken from emacs init file of developer of smaprparens package
#+NAME: smartparens-keybindings
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  ;;Forward sexpr on current level and up
  :pretty-hydra
  ((:color red)
   ("SmallMove"
    (("f" sp-down-sexp          "DownF")
     ("b" sp-backward-up-sexp   "UpF")
     ("u" sp-up-sexp            "UpB")
     ("d" sp-backward-down-sexp "DownB")
     ("A" sp-beginning-of-sexp  "Begin")
     ("E" sp-end-of-sexp        "End"))

    "GreatMove"
    (("p" beginning-of-defun "Bdefun")
     ("n" end-of-defun       "Edefun")
     ("e" sp-forward-sexp    "Forward")
     ("a" sp-backward-sexp   "Backward")
     ("t" sp-transpose-sexp  "Transp"))

    "Select/Change"
    (("]" sp-select-next-thing              "SelectN")
     ("[" sp-select-previous-thing-exchange "SelectP")
     ("i" sp-change-inner                   "Inner")
     ("I" sp-change-enclosing               "InnerEncl"))

    "Slurp/Barf"
    (("<right>" sp-forward-slurp-sexp   "SlurpF")
     ("<left>" sp-forward-barf-sexp     "BarfF")
     ("S-<left>" sp-backward-slurp-sexp "SlurpB")
     ("S-<right>" sp-backward-barf-sexp "BarfF"))

    "Kill/Copy/Slice"
    (("k" sp-kill-sexp "Kill")
     ("w" sp-copy-sexp "Copy")
     ("D" sp-splice-sexp "Splice"))

    "Unwrap/SliceKilling"
    (("<delete>" sp-unwrap-sexp "UnwrapF")
     ("<backspace>" sp-backward-unwrap-sexp "UnwrapB")
     ("M-<delete>" sp-splice-sexp-killing-forward "SpliceKF")
     ("M-<backspace>" sp-splice-sexp-killing-backward "SpliceKB")
     ("S-<backspace>" sp-splice-sexp-killing-around "SpliceKAround"))))

  :bind (:map smartparens-mode-map
	      (;;Defun begin/end
	       ("C-M-p" . beginning-of-defun)
	       ("C-M-n" . end-of-defun)
	       ;;Forward/backward sexp
	       ("C-M-e" . sp-forward-sexp)
	       ("C-M-a" . sp-backward-sexp)

	       ;;Forward down backward up sexpr 
	       ("C-M-f" . sp-down-sexp)
	       ("C-M-b" . sp-backward-up-sexp)

	       ;;Forward up backward down sexpr
	       ("C-M-u" . sp-up-sexp)
	       ("C-M-d" . sp-backward-down-sexp)

	       ;;Beginning and end sexpr (inner sexpr)
	       ("C-S-a" . sp-beginning-of-sexp)
	       ("C-S-e" . sp-end-of-sexp)

	       ;;Forward backward symbols
	       ("M-F" . sp-forward-symbol)
	       ("M-B" . sp-backward-symbol)

	       ;;Trensposer with upper sexpr
	       ("C-M-t" . sp-transpose-sexp)

	       ;;Manipulation of sexp
	       ;;=================================
	       ;;Killing
	       ("C-M-k" . sp-kill-sexp)
	       ("C-M-w" . sp-copy-sexp)
	       
	       ("M-<delete>" . sp-unwrap-sexp)
	       ("M-<backspace>" . sp-backward-unwrap-sexp)

	       ("M-D" . sp-splice-sexp)
	       ("C-M-<delete>" . sp-splice-sexp-killing-forward)
	       ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
	       ("C-S-<backspace>" . sp-splice-sexp-killing-around)

	       ;;Slurp/Barf
	       ("C-<right>" . sp-forward-slurp-sexp)
	       ("C-<left>" . sp-forward-barf-sexp)
	       ("C-M-<left>" . sp-backward-slurp-sexp)
	       ("C-M-<right>" . sp-backward-barf-sexp)

	       ;;Selecting
	       ("M-]" . sp-select-next-thing)
	       ("M-[" . sp-select-previous-thing-exchange)

	       ;;Changing-in
	       ("C-M-i" . sp-change-inner)
	       ("M-i" . sp-change-enclosing)

	       ;;To hydra
	       ("H-s" . smartparens-hydra/body))))
#+END_SRC
*** TODO undo tree
*** helpfull
Helpful is a replacement for *help* buffers that provides much more
contextual information.  To get started, try:
`M-x helpful-function RET helpful-function

The full set of commands you can try is:

helpful-function
helpful-command
helpful-key
helpful-macro
helpful-callable
helpful-variable
helpful-at-point

For more information and screenshots, see
[[https://github.com/Wilfred/helpful][Helpfull GitHub]]

#+NAME: helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :commands (helpful-at-point helpful-command)
    :bind (
           ;; Note that the built-in `describe-function' includes both functions
           ;; and macros. `helpful-function' is functions only, so we provide
           ;; `helpful-callable' as a drop-in replacement.
           ;;           ("C-h f" . #'helpful-callable)
           ;;           ("C-h v" . #'helpful-variable)
           ;;           ("C-h k" . #'helpful-key)

           ;; Lookup the current symbol at point. C-c C-d is a common keybinding
           ;; for this in lisp modes.
           ("C-c C-d" . #'helpful-at-point)

           ;; Look up *F*unctions (excludes macros).
           ;;
           ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
           ;; already links to the manual, if a function is referenced there.
           ;;         ("C-h F" . #'helpful-function)

           ;; Look up *C*ommands.
           ;;
           ;; By default, C-h C is bound to describe `describe-coding-system'. I
           ;; don't find this (vector )ery useful, but it's frequently useful to only
           ;; look at interactive functions.
           ("C-h C" . #'helpful-command)
           ))

#+END_SRC
*** avy (jumping to wisible text)
Avy is a GNU Emacs package for jumping to visible text using a char-based decision tree
[[https://github.com/abo-abo/avy][Avy Github]]
[[https://www.youtube.com/watch?v=zar4GsOBU0g][Avy YouTube reprezentation]]
#+NAME: avi
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind (
           ;;Input one char, jump to it with a tree
           ("C-:" . avy-goto-char)

           ;;Input two consecutive chars, jump to the first one with a tree
           ("C-'" . avy-goto-char-2)

           ;;Input an arbitrary amount of consecutive chars, jump to the first one with a tree.
           ("C-;" . avy-goto-char-timer)

           ;;Input zero chars, jump to a line start with a tree.
           ("M-g g" . avy-goto-line)

           ;;Input one char at word start, jump to a word start with a tree
           ("M-g w" . avy-goto-word-1)

           ;;Input zero chars, jump to a word start with a tree.
           ("M-g e" . avy-goto-word-0)

           ;;You add this to your config to bind some stuff:
           ("C-c C-j" . avy-resume)))
#+END_SRC
*** amx (prioritizing M-x commands)
Amx is an alternative interface for M-x in Emacs. It provides several
enhancements over the ordinary execute-extended-command, such as
prioritizing your most-used commands in the completion list and
showing keyboard shortcuts, and it supports several completion systems
for selecting commands, such as ido and ivy.
[[https://github.com/DarwinAwardWinner/amx/][Amx Github]]

#+NAME: amx
#+BEGIN_SRC emacs-lisp
(use-package amx)
#+END_SRC
*** ibuffer
Config for ibuffer
#+NAME: ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer :bind ("C-x C-b" . ibuffer))
#+END_SRC
*** TODO [#A] dired
**** dired-hacks

**** dired-rainbow

*** icons
**** All-the-icons
#+NAME: all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :demand)
#+END_SRC
[[https://github.com/domtronn/all-the-icons.el][All-the-icons Github]]
This package is a utility for using and formatting various Icon
fonts within Emacs.  Icon Fonts allow you to propertize and format
icons the same way you would normal text.  This enables things such
as better scaling of and anti aliasing of the icons.

**** All-the-icons-ivy
#+NAME: ivy-icons
#+BEGIN_SRC emacs-lisp
;;  (use-package all-the-icons-ivy
;;  :after (all-the-icons)
;;  :init (all-the-icons-ivy-setup))
#+END_SRC
**** All-the-icons-ivy-rich-icons
***** Hacks
#+NAME: q/kill-buffer
#+Begin_SRC emacs-lisp
  ;;;This function need for correct kill buffer throught ivy-rich
  (defun q/all-the-icons-ivy-rich-kill-buffer ()
    "Kill the buffer specified by BUFFER-OR-NAME."
    (interactive)
    (ivy-read
     (format "Kill buffer (default: %s)" (buffer-name (current-buffer)))
     #'internal-complete-buffer
     :preselect (buffer-name (current-buffer))
     :action #'kill-buffer
     :caller 'q/all-the-icons-ivy-rich-kill-buffer))
#+END_SRC
***** BaseConfig
[[https://github.com/seagle0128/all-the-icons-ivy-rich][All-the-icons-rich-icons Github]]
#+NAME: ivy-ricy-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ivy-rich
    :commands (all-the-icons-ivy-rich-mode)
    :init (all-the-icons-ivy-rich-mode 1)

    :bind ("C-x k" . q/all-the-icons-ivy-rich-kill-buffer)

    :custom
    (all-the-icons-ivy-rich-icon-size 1.0)
    (inhibit-compacting-font-caches t)

    ;;IVY-RICH icons  format
    ;;=====================================================
    ;;    (ivy-rich-display-transformer-list)
    (all-the-icons-ivy-rich-display-transformers-list
     '(ivy-switch-buffer
       (:columns
        ((all-the-icons-ivy-rich-buffer-icon)
         (ivy-rich-candidate (:width 30))
         (ivy-rich-switch-buffer-size (:width 7))
         (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
         (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
         ;;(ivy-rich-switch-buffer-project (:width 15 :face success))
         (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
        :predicate
        (lambda (cand) (get-buffer cand))
        :delimiter "\t")
       ivy-switch-buffer-other-window
       (:columns
        ((all-the-icons-ivy-rich-buffer-icon)
         (ivy-rich-candidate (:width 30))
         (ivy-rich-switch-buffer-size (:width 7))
         (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
         (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
         ;; (ivy-rich-switch-buffer-project (:width 15 :face success))
         (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
        :predicate
        (lambda (cand) (get-buffer cand))
        :delimiter "\t")

       ;; counsel
       counsel-switch-buffer
       (:columns
        ((all-the-icons-ivy-rich-buffer-icon)
         (ivy-rich-candidate (:width 30))
         (ivy-rich-switch-buffer-size (:width 7))
         (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
         (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
         ;; (ivy-rich-switch-buffer-project (:width 15 :face success))
         (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
        :predicate
        (lambda (cand) (get-buffer cand))
        :delimiter "\t")
       counsel-switch-buffer-other-window
       (:columns
        ((all-the-icons-ivy-rich-buffer-icon)
         (ivy-rich-candidate (:width 30))
         ;;(ivy-rich-switch-buffer-size (:width 7))
         (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
         (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
         ;; (ivy-rich-switch-buffer-project (:width 15 :face success))
         (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
        :predicate
        (lambda (cand) (get-buffer cand))
        :delimiter "\t")
       counsel-M-x
       (:columns
        ((all-the-icons-ivy-rich-function-icon)
         (counsel-M-x-transformer (:width 40))
         (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-function
       (:columns
        ((all-the-icons-ivy-rich-function-icon)
         (counsel-describe-function-transformer (:width 40))
         (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
       counsel-describe-variable
       (:columns
        ((all-the-icons-ivy-rich-variable-icon)
         (counsel-describe-variable-transformer (:width 40))
         (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
       counsel-describe-symbol
       (:columns
        ((all-the-icons-ivy-rich-symbol-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-set-variable
       (:columns
        ((all-the-icons-ivy-rich-variable-icon)
         (counsel-describe-variable-transformer (:width 40))
         (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
       counsel-apropos
       (:columns
        ((all-the-icons-ivy-rich-symbol-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-info-lookup-symbol
       (:columns
        ((all-the-icons-ivy-rich-symbol-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-descbinds
       (:columns
        ((all-the-icons-ivy-rich-keybinding-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-find-file
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-read-file-transformer))
        :delimiter "\t")
       counsel-file-jump
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-dired
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-read-file-transformer))
        :delimiter "\t")
       counsel-dired-jump
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-el
       (:columns
        ((all-the-icons-ivy-rich-symbol-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-fzf
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-git
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-recentf
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate (:width 0.8))
         (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))
        :delimiter "\t")
       counsel-buffer-or-recentf
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (counsel-buffer-or-recentf-transformer (:width 0.8))
         (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))
        :delimiter "\t")
       counsel-bookmark
       (:columns
        ((all-the-icons-ivy-rich-bookmark-type)
         (all-the-icons-ivy-rich-bookmark-name (:width 40))
         (all-the-icons-ivy-rich-bookmark-info))
        :delimiter "\t")
       counsel-bookmarked-directory
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-package
       (:columns
        ((all-the-icons-ivy-rich-package-icon)
         (ivy-rich-candidate (:width 30))
         (all-the-icons-ivy-rich-package-version (:width 16 :face font-lock-comment-face))
         (all-the-icons-ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
         (all-the-icons-ivy-rich-package-install-summary (:face font-lock-doc-face)))
        :delimiter "\t")
       counsel-fonts
       (:columns
        ((all-the-icons-ivy-rich-font-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-major
       (:columns
        ((all-the-icons-ivy-rich-mode-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-find-library
       (:columns
        ((all-the-icons-ivy-rich-library-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-load-library
       (:columns
        ((all-the-icons-ivy-rich-library-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-load-theme
       (:columns
        ((all-the-icons-ivy-rich-theme-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-world-clock
       (:columns
        ((all-the-icons-ivy-rich-world-clock-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-tramp
       (:columns
        ((all-the-icons-ivy-rich-tramp-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-git-checkout
       (:columns
        ((all-the-icons-ivy-rich-git-branch-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-list-processes
       (:columns
        ((all-the-icons-ivy-rich-process-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-projectile-switch-project
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-projectile-find-file
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (counsel-projectile-find-file-transformer))
        :delimiter "\t")
       counsel-projectile-find-dir
       (:columns
        ((all-the-icons-ivy-rich-project-icon)
         (counsel-projectile-find-dir-transformer))
        :delimiter "\t")
       counsel-minor
       (:columns
        ((all-the-icons-ivy-rich-mode-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-imenu
       (:columns
        ((all-the-icons-ivy-rich-imenu-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-cd
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       counsel-company
       (:columns
        ((all-the-icons-ivy-rich-company-icon)
         (ivy-rich-candidate))
        :delimiter "\t")

       ;; pkacage
       package-install
       (:columns
        ((all-the-icons-ivy-rich-package-icon)
         (ivy-rich-candidate (:width 30))
         (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
         (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
         (ivy-rich-package-install-summary (:face font-lock-doc-face)))
        :delimiter "\t")
       package-reinstall
       (:columns
        ((all-the-icons-ivy-rich-package-icon)
         (ivy-rich-candidate (:width 30))
         (ivy-rich-package-version (:width 16 :face font-lock-comment-face))
         (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
         (ivy-rich-package-install-summary (:face font-lock-doc-face)))
        :delimiter "\t")
       package-delete
       (:columns
        ((all-the-icons-ivy-rich-package-icon)
         (ivy-rich-candidate))
        :delimiter "\t")

       ;; persp-switch-to-buffer
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-buffer-icon)
       ;;   (ivy-rich-candidate (:width 30))
       ;;   (ivy-rich-switch-buffer-size (:width 7))
       ;;   (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
       ;;   (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
       ;;   (ivy-rich-switch-buffer-project (:width 15 :face success))
       ;;   (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
       ;;  :predicate
       ;;  (lambda (cand) (get-buffer cand))
       ;;  :delimiter "\t")
       ;; persp-switch
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-project-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-frame-switch
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-project-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-window-switch
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-project-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-kill
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-project-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-save-and-kill
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-project-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-import-buffers
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-project-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-import-win-conf
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-project-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-kill-buffer
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-buffer-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-remove-buffer
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-buffer-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")
       ;; persp-add-buffer
       ;; (:columns
       ;;  ((all-the-icons-ivy-rich-buffer-icon)
       ;;   (ivy-rich-candidate))
       ;;  :delimiter "\t")

       q/all-the-icons-ivy-rich-kill-buffer
       (:columns
        ((all-the-icons-ivy-rich-buffer-icon)
         (ivy-rich-candidate))
        :delimiter "\t")

       treemacs-projectile
       (:columns
        ((all-the-icons-ivy-rich-file-icon)
         (ivy-rich-candidate))
        :delimiter "\t")
       )))
#+End_SRC
**** All-the-icons-ibuffer-icons
#+NAME: ibuffer-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-ibuffer
  :after ibuffer
  :commands (all-the-icons-ibuffer-mode)
  :init (all-the-icons-ibuffer-mode))
#+END_SRC
**** Dired-icons
#+NAME: ibuffer-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons-dired 
    :after (all-the-icons dired)
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
**** Treemacs-icons
#+NAME: treemacs-icons
#+BEGIN_SRC emacs-lisp
(use-package treemacs-all-the-icons
:after treemacs)

#+END_SRC
**** Treemacs-icons-dired
#+NAME: treemacs-icons-dired
#+BEGIN_SRC emacs-lisp
;;  (use-package treemacs-icons-dired
;;    :demand
;;    :after (treemacs dired)
;;    :config (treemacs-icons-dired-mode))
#+END_SRC
*** posframe (popup frame at point)
**** Posframe-base
Posframe can pop up a frame at point, this posframe is a child-frame connected to its root window's buffer.
[[https://github.com/tumashu/posframe][Posframe Github]]
#+NAME: posframe-ivy
#+BEGIN_SRC emacs-lisp
(use-package posframe)
#+END_SRC
**** Ivy-posframe
This is a ivy extension, which let ivy use posframe to show its candidate menu
[[https://github.com/tumashu/ivy-posframe][Ivy Posframe Github]]

#+NAME: ivy-posframe
#+BEGIN_SRC emacs-lisp
;;  (use-package ivy-posframe
;;    :init
;;    ;; display at `ivy-posframe-style'
;;    (setq ivy-posframe-display-functions-alist
;;          '((swiper-isearch  . ivy-display-function-fallback)
;;            (swiper-backward . ivy-display-function-fallback)
;;            (complete-symbol . ivy-posframe-display-at-point)
;;            ;;(counsel-M-x     . ivy-posframe-display-at-window-bottom-left)
;;            (t               . ivy-posframe-display)))
;;
;;    (ivy-posframe-mode 1))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-point)))


#+END_SRC
**** Dired-posframe
This package is a peep-dired inspired, dired glimpse package using posframe.
[[https://github.com/conao3/dired-posframe.el][Dired-posframe Github]]
#+NAME: dired-posframe
#+BEGIN_SRC emacs-lisp
 ;; (use-package dired-posframe
 ;;   :hook (dired-mode . dired-posframe-mode))
#+END_SRC
**** TODO Hydra-posframe
#+NAME: hydra-posframe
#+BEGIN_SRC emacs-lisp

#+END_SRC

*** TODO search
**** TODO FUZ (fuzzy match sortint/matching functions)
Provides some fuzzy match scoring/matching functions for Emacs, they are powered by Rust so it’s fast enough.
[[https://github.com/rustify-emacs/fuz.el][Fuz Github]]
#+NAME: fuz
#+BEGIN_SRC emacs-lisp
#+END_SRC
**** FZF (very fast search fuzzy tool)
An Emacs front-end for [[https://github.com/junegunn/fzf][fzf]]
[[https://github.com/bling/fzf.el][Fzf Github]]
#+NAME: fzf
#+BEGIN_SRC emacs-lisp
(use-package fzf)
#+END_SRC
**** FLX [DEPTRECATE] (fuzzy search functions)
Fuzzy matching with good sorting
[[https://github.com/lewang/flx][Flx Github]]
#+NAME: flx
#+BEGIN_SRC emacs-lisp
(use-package flx)
#+END_SRC
**** WGREP (allows to edit and apply changes to a grep buffer)
wgrep allows you to edit a grep buffer and apply those changes to the file buffer like sed interactively. No need to learn sed script, just learn Emacs.
[[https://github.com/mhayashi1120/Emacs-wgrep][Wgrep GitHub]]
#+NAME: wgrep
#+BEGIN_SRC emacs-lisp
(use-package wgrep)
#+END_SRC
**** TODO PHI (search/replace compabile with multi-cursors)
another incremental search & replace, compatible with “multiple-cursors”
[[https://github.com/zk-phi/phi-search][PHI (search-replace) Github]]
***** TODO Phi-search
#+NAME: phi-search
#+BEGIN_SRC emacs-lisp
;;(use-package phi-search)
#+END_SRC
***** TODO Phi-replace
#+NAME: phi-replace
#+BEGIN_SRC emacs-lisp
;;(use-package phi-replace)
#+END_SRC

*** region-bindings-mode
Comfort mode for autobind command for work with region and keeping global bindings clean
Good idea will be setup this mode together with multiple cursors
[[https://github.com/fgallina/region-bindings-mode][Region-bindings-mode GitHub]]
#+NAME: region-bindings-mode
#+BEGIN_SRC emacs-lisp
(use-package region-bindings-mode
  ;;To think about hooks for program modes
  :commands (region-bindings-mode-enable)
  :init
  (region-bindings-mode-enable))
#+END_SRC
*** multiple-cursors
Multiple cursors for Emacs. This is some pretty crazy functionality, so yes, there are kinks. Don't be afraid though, I've been using it since 2011 with great 
success and much merriment.

[[https://github.com/magnars/multiple-cursors.el][Multiple cursors Github]]
**** base-mc
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors :demand t)
#+END_SRC
**** ace-mc
#+BEGIN_SRC emacs-lisp
(use-package ace-mc :after multiple-cursors)
#+END_SRC
**** multiple-cursors-bindings
#+NAME: mutliple-cursors-bindings

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config     
  ;;Add hydras
  (pretty-hydra-define mc-region-hydra
    (:title "MC regions" :color red :quit-key "q")
    ("Mark"
     (("a"  mc/mark-all-like-this "all")
      ("d"  mc/mark-all-like-this-in-defun "all defun")
      ("n"  mc/mark-next-like-this "next")
      ("p"  mc/mark-previous-like-this "previous")
      ("m"  mc/mark-more-like-this-extended "extend")
      ("r"  mc/mark-all-in-region "region"))

     "Unmark/Skip"
     (("N" mc/unmark-next-like-this "N-unmark")
      ("P" mc/unmark-previous-like-this "P-unmark")
      ("SPC" mc/skip-to-next-like-this "N-skip")
      ("S-SPC" mc/skip-to-previous-like-this "P-skip"))

     "Edits"
     (("c"  mc/edit-lines "lines")
      ("b"  mc/edit-beginnings-of-lines "beg lines")
      ("e"  mc/edit-ends-of-lines "end lines"))

     "Special"
     (("R" set-rectangular-region-anchor "set anchor")
      ("t" mc/mark-sgml-tag-pair "tag bair")
      ("i" mc/insert-numbers "insert numbers")
      ("I" mc/insert-letters "insert letters")
      ("s" mc/sort-regions "sort")
      ("S" mc/reverse-regions "reverse"))))

  (pretty-hydra-define mc-symbols-hydra
   (:title "MC symbols" :color red :quit-key "q")
   ("Mark"
    (("a"  mc/mark-all-symbols-like-this "all")
     ("d"  mc/mark-all-symbols-like-this-in-defun "all defun")
     ("n"  mc/mark-next-symbol-like-this "next")
     ("p"  mc/mark-previous-symbol-like-this "previous")
     ("m"  mc/mark-more-like-this-extended "extend"))

    "Unmark/Skip"
    (("N" mc/unmark-next-like-this "N-unmark")
     ("P" mc/unmark-previous-like-this "P-unmark")
     ("SPC" mc/skip-to-next-like-this "N-skip")
     ("S-SPC" mc/skip-to-previous-like-this "P-skip"))

    "Special"
    (("t" mc/mark-sgml-tag-pair "tag bair")
     ("i" mc/insert-numbers "insert numbers")
     ("I" mc/insert-letters "insert letters")
     ("s" mc/sort-regions "sort")
     ("S" mc/reverse-regions "reverse"))))

  (pretty-hydra-define mc-words-hydra
    (:title "MC words" :color red :quit-key "q")
    ("Mark"
     (("a"  mc/mark-all-words-like-this "all")
      ("d"  mc/mark-all-words-like-this-in-defun "all defun")
      ("n"  mc/mark-next-word-like-this "next")
      ("p"  mc/mark-previous-word-like-this "previous")
      ("m"  mc/mark-more-like-this-extended "extend"))

     "Unmark/Skip"
     (("N" mc/unmark-next-like-this "N-unmark")
      ("P" mc/unmark-previous-like-this "P-unmark")
      ("SPC" mc/skip-to-next-like-this "N-skip")
      ("S-SPC" mc/skip-to-previous-like-this "P-skip"))

     "Special"
     (("t" mc/mark-sgml-tag-pair "tag bair")
      ("i" mc/insert-numbers "insert numbers")
      ("I" mc/insert-letters "insert letters")
      ("s" mc/sort-regions "sort")
      ("S" mc/reverse-regions "reverse"))))

  :bind
  ("C-S-<mouse-1>" . mc/add-cursor-on-click)
  ("H-c" . mc-region-hydra/body)
  ("H-w" . mc-words-hydra/body)
  ("H-d" . mc-symbols-hydra/body)

  (:map region-bindings-mode-map
               ;;Mark one more occurrence
               ("a" . mc/mark-all-like-this)
               ("d" . mc/mark-all-like-this-in-defun)
               ("p" . mc/mark-previous-like-this)
               ("n" . mc/mark-next-like-this)
               ("m" . mc/mark-more-like-this-extended)
	       ("f" . ace-mc-add-multiple-cursors)

               ;;Juggle around with the current cursors
               ("P" . mc/unmark-previous-like-this)
               ("N" . mc/unmark-next-like-this)
               ("SPC" . mc/skip-to-next-like-this)
               ("S-SPC" . mc/skip-to-previous-like-this)

               ;;Mark many occurrences
               ("c" . mc/edit-lines)
               ("e" . mc/edit-ends-of-lines)
               ("b" . mc/edit-beginnings-of-lines)
               ("r" . mc/mark-all-in-region)

               ;;Special
               ("R" . set-rectangular-region-anchor)
               ("t" . mc/mark-sgml-tag-pair)
               ("i" . mc/insert-numbers)
               ("I" . mc/insert-letters)
               ("s" . mc/sort-regions)
               ("S" . mc/reverse-regions))
  )
#+END_SRC
*** COMMENT edit-server
This provides an edit server to respond to requests from the Chrome
Emacs Chrome plugin. This is my first attempt at doing something
with sockets in Emacs. I based it on the following examples:
[[https://github.com/stsquad/emacs_chrome][Emacs_chrome GitHub]]
[[http://www.emacswiki.org/emacs/EmacsEchoServer][Emacs_chrome EmacsWiki]]
[[http://nullprogram.com/blog/2009/05/17/][Emacs_chrome NullProgramm]]
#+NAME: edit-server
#+BEGIN_SRC emacs-lisp
(use-package edit-server
  :commands edit-server-start
  :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
  :config (setq edit-server-new-frame-alist
                '((name . "Edit with Emacs FRAME")
                  (top . 300)
                  (left . 300)
                  (width . 50)
                  (height . 15)
                  (minibuffer . t)
;;                  (menu-bar-lines . x ;TODO: )
                  (window-system . x))))
#+END_SRC

** packages
#+NAME: paradox
#+BEGIN_SRC emacs-lisp
(use-package paradox)
#+END_SRC
** prog
*** git
**** MAGIT
Magit is a complete text-based user interface to Git
 [[https://github.com/magit/magit][Magit Github reqpository]]
 [[https://magit.vc/][Magit HOME PAGE]]
 [[https://magit.vc/manual/magit/index.html#Top][Magit User Manual]]
 
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("M-9" . magit-status)
  ("C-x g" . magit-status)
  )
#+END_SRC

*** ediff
Built in package for diffing and merging files
#+NAME: ediff
#+BEGIN_SRC emacs-lisp
;;Taken this config from https://protesilaos.
(use-package ediff
  :config
  (setq ediff-keep-variants nil)
  (setq ediff-make-buffers-readonly-at-startup t)
  (setq ediff-show-clashes-only nil) ;;all regions or only differences
  ;; (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-split-window-function 'split-window-vertically)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)

  ;;disable question for close ediff session
  (defun disable-y-or-n-p (orig-fun &rest args)
    (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
      (apply orig-fun args)))
  (advice-add 'ediff-quit :around #'disable-y-or-n-p)

  )

#+END_SRC
*** project management
**** treemacs
Here is a configured packages for project managemant
#+BEGIN_SRC emacs-lisp
;;===================================================================
;;TREEMACS
(use-package treemacs
  :defer t
  :commands (treemacs-follow-mode
             treemacs-filewatch-mode
             treemacs-fringe-indicator-mode
             treemacs-git-mode)
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      2.0
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.7 
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   1
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
	  ;;I thing that need delete other window when treemacs open new file
          treemacs-no-delete-other-windows       nil 
          treemacs-project-follow-cleanup        t
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-read-string-input             'from-child-frame
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      nil
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              3.0
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         30
          treemacs-workspace-switch-cleanup      t)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-resize-icons 15)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind (("M-1"       . treemacs-select-window)
         ("C-x t 1"   . treemacs-delete-other-windows)
         ("C-x t t"   . treemacs)
         ("C-x t B"   . treemacs-bookmark)
         ("C-x t C-t" . treemacs-find-file)
         ("C-x t M-t" . treemacs-find-tag)
	 (:map treemacs-mode-map
               ("C-n" . treemacs-next-neighbour)
               ("C-p" . treemacs-previous-neighbour))))
;;     ([mouse-1] . #'treemacs-single-click-expand-action))



(use-package treemacs-projectile
  :after treemacs projectile)



(use-package treemacs-magit
  :after treemacs magit)


;;(use-package treemacs-evil
;;  :after treemacs evil
;;  :ensure t)

;;(use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
;;  :after treemacs persp-mode ;;or perspective vs. persp-mode
;;  :config (treemacs-set-scope-type 'Perspectives))

#+END_SRC
**** TODO projectile
***** Projectile-base
This library provides easy project management and navigation.  The
concept of a project is pretty basic - just a folder containing
special file.  Currently git, mercurial and bazaar repos are
considered projects by default.  If you want to mark a folder
manually as a project just create an empty .projectile file in
it.  See the README for more details.
[[https://github.com/bbatsov/projectile][Projectile Github]]
[[https://docs.projectile.mx/projectile/index.html][User Manual]]
#+BEGIN_SRC emacs-lisp
(load (q/get-config-file "projectile-discovery.el"))
(use-package projectile
  :demand
  :init (projectile-mode +1)
  :custom
  (projectile-complection-system 'ivy)
  (projectile-indexing-method 'hybrid)
  (projectile-sort-order 'recentf)
  (projectile-track-known-projects-automatically nil)
  (projectile-auto-discover nil)
  
  :bind (:map projectile-mode-map
	      ("M-<f1>" . projectile-command-map)
	      ;;("C-c p" . projectile-command-map) 
	      ;;("M-p" . projectile-command-map)
)
  :config


  ;;Add paths for discover projects
  (setq projectile-project-search-path (list q/projects-directory q/sources-directory)
	  
	  projectile-project-root-files-bottom-up
	  (append (list "README.md" "README.org" "README") projectile-project-root-files-bottom-up)

	;;Config filteres by next link
	;;https://gitlab.com/skybert/my-little-friends/blob/master/emacs/.emacs#L603
	projectile-globally-ignored-file-suffixes
	'("blob" "class" "classpath" "gz" "iml" "ipr" "jar" "pyc" "tkj" "war" "xd" "zip")

	projectile-globally-ignored-directories
	(append (list
		 "build.*" "elpa.*" "node_modules" "output" "target.*" "straight" "repos"
		 "venv" "semanticdb" "reveal.js" "__pycache__" ".pytest_cache" "cache.*"
		 "package.*")
                projectile-globally-ignored-directories)
	))


#+END_SRC
***** Counsel-projectile
Projectile has native support for using ivy as its completion
system. Counsel-projectile provides further ivy integration into
projectile by taking advantage of ivy's support for selecting from
a list of actions and applying an action without leaving the
completion session. Concretely, counsel-projectile defines
replacements for existing projectile commands as well as new
commands that have no projectile counterparts. A minor mode is also
provided that adds key bindings for all these commands on top of
the projectile key bindings.

[[https://github.com/ericdanan/counsel-projectile][Counsel-projectile Github]]
#+NAME: counsel-projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :hook (after-init . counsel-projectile-mode))

#+END_SRC
***** TODO iBuffer-projectile
Adds functionality to ibuffer for grouping buffers by their projectile
root directory.
[[https://github.com/purcell/ibuffer-projectile][iBuffer-projectile]]
#+NAME: ibuffer-projectile
#+BEGIN_SRC emacs-lisp
;;(use-package ibuffer-projectile)
#+END_SRC
*** TODO COMMENT folding
**** origami
A text folding minor mode for Emacs.
[[https://github.com/gregsexton/origami.el][Origami GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package origami
    
    :init (origami-mode 1)
    :bind (:map origami-mode-map
                ("M-<f1>" . origami-toggle-node)
                ("M-<f2>" . origami-toggle-all-nodes)))
#+END_SRC
*** COMMENT lsp-env
Language Server Protocol Support for Emacs
[[https://emacs-lsp.github.io/lsp-mode/][LSP mode and friends]]
[[https://emacs-lsp.github.io/lsp-mode/page/installation/][Lsp Instalation]]
**** lsp-mode
Emacs client/library for the Language Server Protocol
[[https://github.com/emacs-lsp/lsp-mode][Lsp-mode Github]]
[[https://emacs-lsp.github.io/lsp-mode/][Lsp-mode homepage]]
#+NAME: lsp-mode
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook
    (lsp-mode . lsp-enable-which-key-integration)
    (lsp-mode . lsp-lens-mode)
    (yaml-mode . lsp-deferred)
    (web-mode . lsp-deferred)
  ;;  (lsp-mode . lsp-treemacs-generic-mode)
    :custom
    (lsp-completion-enable-additional-text-edit nil)
    (lsp-headerline-breadcrumb-segments '(project file symbols))
    (lsp-keymap-prefix "H-f")
    (lsp-print-io t)
    (lsp-pring-performance nil)
    (lsp-server-trace "verbose")
  
    ;;(lsp-enable-snippet t) ;;default
    ;;(lsp-auto-guess-root nil) ;;default
    ;;(lsp-eldoc-render-all nil) ;;default
    ;;(lsp-diagnostics-provider :auto) ;;default flaycheck or fallback to flymake
    ;;(lsp-enable-file-watchers t) ;;default
    ;;(lsp-semantic-tokens-enable nil) ;;default

    :bind
    (:map lsp-mode-map
	  ("M-<insert>" . lsp-execute-code-action)))
  
#+END_SRC
**** lsp-languages-config
***** lsp-xml
#+NAME: lsp-xml-config
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-xml-format-enabled nil))
#+END_SRC
***** lsp-groovy
#+NAME: lsp-groovy-config
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :config
    (setq lsp-groovy-server-file "~/git/groovy-language-server/build/libs/groovy-language-server-all.jar")
    ;;(setq lsp-groovy-classpath ["/usr/share/groovy/lib"])
    )
#+END_SRC
**** lsp-UI
lsp-ui contains a series of useful UI integrations for lsp-mode, like
flycheck support and code lenses.
[[https://github.com/emacs-lsp/lsp-ui][Lsp-ui GitHub]]
***** base
#+NAME: lsp-ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :commands lsp-ui-mode)
#+END_SRC
***** side-line
#+NAME: lsp-ui-sideline
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :config
  ;;  (setq lsp-ui-sideline-update-mode 'line)
  :custom
  (lsp-ui-sideline-show-hover nil)
  (lsp-ui-sideline-ignore-dublicate t)
  (lsp-ui-sideline-delay 0.5)
  :bind (:map lsp-ui-mode-map
	      ("M-RET" . lsp-ui-sideline-apply-code-actions)
	      ("M-2 m" . lsp-ui-imenu)))
#+END_SRC
***** peek
#+NAME: lsp-ui-peek
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
:bind
(:map lsp-ui-mode-map
      ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
      ([remap xref-find-references] . lsp-ui-peek-find-references))
)
#+END_SRC
***** doc
#+NAME: lsp-ui-doc
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :custom
  (lsp-ui-doc-delay nil)
  :config
  (setq lsp-ui-doc-position 'top)
  (setq lsp-ui-doc-alignment 'window)
  (setq lsp-ui-doc-max-width 65)
  (setq lsp-ui-doc-max-height 15)
  
  (setq lsp-ui-doc-include-signature t)

;;  (defun q/test-fun (content)
;;    "Hello!")

;;  (setq lsp-ui-doc-render-function #'q/test-fun)

  ;;Custom function
  (defun q/lsp-ui-doc-show ()
    (interactive)
    (lsp-ui-doc-show)
    (lsp-ui-doc-focus-frame))
  (defun q/lsp-ui-doc-hide ()
    (interactive)
    (lsp-ui-doc-unfocus-frame)
    (lsp-ui-doc-hide))
  
  :bind
  (:map lsp-ui-doc-mode-map
	("M-q" . q/lsp-ui-doc-show))
  
  (:map lsp-ui-doc-frame-mode-map
	("q" . q/lsp-ui-doc-hide)
        ("C-g" . q/lsp-ui-doc-hide)
	("n" . next-line)
	("p" . previous-line)
	("j" . next-line)
	("k" . previous-line)))
#+END_SRC
**** lsp-java
#+NAME: lsp-java
#+BEGIN_SRC emacs-lisp

(use-package lsp-java
  :init
  ;;(setenv "JAVA_HOME" "/usr/lib/jvm/java-11-openjdk/")
  (setenv "JAVA_HOME" "/usr/lib/jvm/default/")
  :hook
  (java-mode . lsp-java-lens-mode)
  (java-mode . lsp-jt-lens-mode)
  ;;(java-mode . lsp-java-boot-lens-mode)
  
  (java-mode . lsp)
  

  :custom
  ;; Don't organise imports on save
  (lsp-java-save-action-organize-imports nil)

  ;; Fetch less results from the Eclipse server
  (lsp-java-completion-max-results 30)

  ;; Currently (2019-04-24), dap-mode works best with Oracle
  ;; JDK, see https://github.com/emacs-lsp/dap-mode/issues/31
  ;;
  ;; lsp-java-java-path "~/.emacs.d/oracle-jdk-12.0.1/bin/java"
  ;;(lsp-java-java-path "/usr/lib/jvm/java-11-openjdk/bin/java")
  (lsp-java-java-path "/usr/lib/jvm/default/bin/java")

  ;;===============================================================
  ;;Additionals
  (lsp-java-pop-buffer-function 'company-box-doc-manually)
  (lsp-java-maven-download-sources t)
  )

#+END_SRC

**** ivy-lsp
This package provides an interactive ivy interface to the workspace symbol
functionality offered by lsp-mode.
[[https://github.com/emacs-lsp/lsp-ivyhttps://github.com/emacs-lsp/lsp-ivy][Ivy-lsp Github]]
#+NAME: ivy-lsp
#+BEGIN_SRC emacs-lisp
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
**** COMMENT helm (test)
***** Helm-base
#+NAME: helm
#+BEGIN_SRC emacs-lisp
(use-package helm 
:config (helm-mode)


)
#+END_SRC
***** Helm-lsp
#+NAME: helm-lsp
#+BEGIN_SRC emacs-lisp
(use-package helm-lsp
;;:bind
;;  ("M-2 w" . helm-lsp-workspace-symbol)
;;  ("M-2 g" . helm-lsp-global-workspace-symbol)
  )
#+END_SRC
**** treemacs-lsp
`lsp-mode' and `treemacs' integration.
[[https://github.com/emacs-lsp/lsp-treemacs][LSP treemacs Github]]
#+NAME: treemacs-lsp
#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
  :after lsp-mode
  :commands lsp-treemacs-errors-list
  :init
  (global-unset-key (kbd "M-2"))
  :config
  (lsp-treemacs-sync-mode 1)
  :bind
  ("M-2 h" . lsp-treemacs-call-hierarchy)
  ("M-2 s" . lsp-treemacs-symbols)
  ("M-2 r" . lsp-treemacs-references)
  ("M-2 e" . lsp-treemacs-errors-list)
  ("M-2 i" . lsp-treemacs-implementations)
  ("M-2 l" . lsp-treemacs-java-deps-list)
  ;; ("M-2 f" . lsp-treemacs-java-deps-follow)
  ;;("M-2 g" . lsp-treemacs-java-deps-refresh)
  )
#+END_SRC
*** COMMENT lisp-env
**** TODO slime
SLIME is the Superior Lisp Interaction Mode for Emacs
[[https://github.com/slime/slime][SLIME Github]]
#+NAME: slime
#+BEGIN_SRC emacs-lisp
;;(use-package slime)
#+END_SRC
**** TODO gaiser
[[https://www.nongnu.org/geiser/][Geiser site]]
#+NAME: gaiser
#+BEGIN_SRC emacs-lisp
;;(use-package geiser)
  
#+END_SRC
*** COMMENT scripts-env
**** groovy
***** groovy-mode
This repository contains Emacs modes for Groovy and Grails. The major features are syntax highlighting with groovy-mode, REPL integration with run-groovy and Grails project navigation with grails-mode.
[[https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes][Groovy-mode GitHub]]
#+NAME: groovy_grale_run-groovy
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :custom (groovysh "/usr/bin/groovysh"))

(use-package grails-mode)

#+END_SRC
***** grale-mode

*** web
**** web-mode
[[https://web-mode.org/][Web-mode HomePage]]
[[https://github.com/fxbois/web-mode][Web-mode GitHub]]
#+NAME: web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode
  ("\\.phtml\\'" . web-mode)
  ("\\.tpl\\.php\\'" . web-mode)
  ("\\.[agj]sp\\'" . web-mode)
  ("\\.as[cp]x\\'" . web-mode)
  ("\\.erb\\'" . web-mode)
  ("\\.mustache\\'" . web-mode)
  ("\\.djhtml\\'" . web-mode)
  ("\\.html?\\'" . web-mode)
  ;;xml group
  ("\\.svgz?\\'" . web-mode)
  ("\\x[ms]l\\'" . web-mode)
  ("\\.dbk\\'" . web-mode)
  )
#+END_SRC
This is an emacs major mode for editing web templates aka HTML files
embedding parts (CSS/JavaScript) and blocks (pre rendered by client/server side
engines).

This is compatible with many template engines: PHP, JSP, ASP, Django,
Twig, Jinja, Mustache, ERB, FreeMarker, Velocity, Cheetah, Smarty, CTemplate,
Mustache, Blade, ErlyDTL, Go Template, Dust.js, Google Closure (soy),
React/JSX, Angularjs, ejs, Nunjucks, etc.
**** php-mode
[[https://github.com/emacs-php/php-mode][GitHub php-mode]]
#+NAME: php-mode
#+BEGIN_SRC emacs-lisp
(use-package php-mode)
#+END_SRC

#+RESULTS: php-mode

*** COMMENT debug
**** realgud
A extensible, modular GNU Emacs front-end for interacting with external debuggers
[[https://github.com/realgud/realgud/][RealGud Github]]
[[https://github.com/realgud/realgud/wiki][RealGud Wiki]]
#+NAME: realgud
#+BEGIN_SRC emacs-lisp
(use-package realgud)
#+END_SRC
**** flycheck
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs,
intended as replacement for the older Flymake extension which is part of GNU
Emacs.
Flycheck automatically checks buffers for errors while you type, and reports
warnings and errors directly in the buffer and in an optional IDE-like error
list.
[[http://www.flycheck.org][Flycheck site]]

#+NAME: flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.15)))
  :hook 
  (prog-mode . flycheck-mode)

  :custom
  (flycheck-emacs-lisp-load-path 'inherit)
  ;;  (flycheck-emacs-lisp-load-path ())
  (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (flycheck-keymap-prefix (kbd "M-4"))) ;;flycheck prefix for quickly work with code check
#+END_SRC
***** dap (debug adapter protocol)
****** Dap-mode
Debug Adapter Protocol client for Emacs.
[[https://github.com/yyoncho/dap-mode][Dap-mode GitHub]]
#+NAME: dap-mode
#+BEGIN_SRC emacs-lisp
(use-package dap-mode 
:after lsp-mode
:config (dap-auto-configure-mode))
#+END_SRC
*** config
[[https://github.com/yoshiki/yaml-mode][Yaml-mode Github]]
#+NAME: yaml-mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml\\'" . yaml-mode)
  :bind (:map yaml-mode-map
	      ("C-m" . 'newline-and-indent)))
#+END_SRC
This is a major mode for editing files in the YAML data
serialization format.  It was initially developed by Yoshiki
Kurihara and many features were added by Marshall Vandegrift.  As
YAML and Python share the fact that indentation determines
structure, this mode provides indentation and indentation command
behavior very similar to that of python-mode.

*** COMMENT compilation
**** compilation-mode
;; Convert shell escapes to  color
#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-filter-hook
          (lambda () (ansi-color-apply-on-region (point-min) (point-max))))
#+END_SRC

** text
*** org
A souped up markup with tasking, scheduling and aggregation features.
**** TODO straight.el fixes (TEST)
Fix some issues with straight.el and org until that is resolved.
[[https://github.com/raxod502/straight.el#installing-org-with-straightel][That is resolved]]
***** fix-org-git-version
#+NAME: fix-org-git-version
#+BEGIN_SRC emacs-lisp
  ;; (defun fix-org-git-version ()
  ;;   "The Git version of org-mode.
  ;;   Inserted by installing org-mode or when a release is made."
  ;;   (require 'git)
  ;;   (let ((git-repo (expand-file-name
  ;;                    "straight/repos/org/" user-emacs-directory)))
  ;;     (string-trim
  ;;      (git-run "describe"
  ;;               "--match=release\*"
  ;;               "--abbrev=6"
  ;;               "HEAD"))))
#+END_SRC
***** fix-org-release
#+NAME: fix-org-release
#+BEGIN_SRC emacs-lisp
  ;; (defun fix-org-release ()
  ;;   "The release version of org-mode.
  ;;   Inserted by installing org-mode or when a release is made."
  ;;   (require 'git)
  ;;   (let ((git-repo (expand-file-name
  ;;                    "straight/repos/org/" user-emacs-directory)))
  ;;     (string-trim
  ;;      (string-remove-prefix
  ;;       "release_"
  ;;       (git-run "describe"
  ;;                "--match=release\*"
  ;;                "--abbrev=0"
  ;;                "HEAD")))))
#+END_SRC
**** ORG
#+BEGIN_SRC emacs-lisp
;;Config org-mode
(use-package org
  :after (delight)
  :commands (org-open-at-point org-babel-tangle-file org-toggle-pretty-entities)

  :delight (org-mode "ORG")

  ;;KEY BINDINGS
  :bind (("C-c l" . org-store-link))        ;;Following or set links

  ;;Unset unneeded default keybindings
  ;;:hook (org-mode . (lambda () (local-unset-key ("C-'"))))
  :hook (org-babel-after-execute . q/org-open-at-point)

  :custom
  (org-startup-indented t)
  (org-startup-folded t)
  (org-hide-block-startup nil)
  (org-startup-with-inline-images nil)
  (org-startup-with-beamer-mode t)
  (org-hide-leading-stars t)
  (org-hide-emphasis-markers t)
  (org-src-preserve-indentation nil) 
  (org-edit-src-content-indentation 0)
  (org-src-tab-acts-natively t)
  ;;Toggle hide results Hide all results 
  ;;(add-hook 'org-mode-hook 'org-babel-result-hide-all)

  ;;Disable confirm evalute code blocks
  (org-confirm-babel-evaluate nil)

  ;;Whole window for edit src 
  (org-src-window-setup 'current-window)  

  :config
  ;;add redisplay inline images
  (defun q/org-open-at-point ()
    (org-open-at-point)
    (other-window 1))

  (delight '((org-indent-mode "ⓘ" org-indent) 
             (org-beamer-mode "ⓑ" ox-beamer)))

  ;;Toggle \*** to UTF-8
  ;;Toggle visual line mode for org
  ;;:commands (org-babel-result-hide-all)
  (org-toggle-pretty-entities)

  ;;BABEL configure
  ;;load languages for babel mode in orgmode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((java.t)
     (emacs-lisp.t)
     (shell . t))))
#+END_SRC
**** Org-Agenda
#+NAME: org-agenda
#+BEGIN_SRC emacs-lisp
(use-package org
  :config)
#+END_SRC
**** Org-Bullets
 #+BEGIN_SRC emacs-lisp
 (use-package org-bullets
     :after (org org-journal)
     :diminish
     :hook (org-mode . org-bullets-mode))
 #+END_SRC
**** Org-Download
  #+BEGIN_SRC emacs-lisp
    (use-package org-download
      :straight t
      :after (org))
  #+END_SRC
**** Org-journal
Functions to maintain a simple personal diary / journal using in Emacs.
[[https://github.com/bastibe/org-journal/blob/master/README.org][Org-journal Github]]
#+NAME: org-journal
#+BEGIN_SRC emacs-lisp
   (use-package org-journal
     :after(org)
;;     :delight (org-journal "ORG")
     :custom
     (org-journal-dir (concat (file-name-as-directory org-directory) "journal"))
     (org-journal-file-format "%Y/%m/%Y%m%d.journal")
     (org-journal-date-format "%A, %Y-%m-%d")
  ;;   (org-journal-encrypt-journal t)
  ;;   (org-journal-enable-encryption nil)
     (org-journal-enable-agenda-integration t)
     :bind
     ("C-c j" . org-journal-new-entry))
#+END_SRC
**** Ox-pandoc
[[https://github.com/kawabata/ox-pandoc][Ox-pandoc GitHub]]
#+NAME: ox-pandoc
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** pandoc-mode
It is an Emacs mode for interacting with Pandoc. Pandoc is a program (plus libraries) 
created by John MacFarlane that can convert a text written in one markup language into 
another markup language.
[[http://joostkremers.github.io/pandoc-mode/][Pandoc-mode Homepage]]
#+NAME: pandoc-mode
#+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
  :commands (pandoc-load-default-settings)
  :hook (pandoc-mode . pandoc-load-default-settings))
#+END_SRC
*** markdown-mode
Режим для чтения и написания документов с разметкой Markdown
[[https://jblevins.org/projects/markdown-mode/][Markdown-mode Homepage]]
#+BEGIN_SRC emacs-lisp
;;(use-package markdown-mode
;;  :after (pandoc-mode)
;;  :commands (markdown-mode gfm-mode)
;;  :mode 
  ;;("README\\.md\\'" . gfm-mode)
;;  ("\\.md\\'" . markdown-mode)
;;  ("\\.markdown\\'" . markdown-mode)
;;  :hook
  ;;(markdown-mode . pandoc-mode)
  ;;(gfm-mode . pandoc-mode)
;;  :custom
;;  (markdown-header-scaling t))
#+END_SRC

*** plantuml mode
   #+BEGIN_SRC emacs-lisp
     (use-package plantuml-mode
       :after (org)
       ;;Enable plantuml-mode for PlantUML files
       :mode ("\\.puml\\'" . plantuml-mode)

       :custom
       ;;active org-babel languages
       (org-plantuml-jar-path (expand-file-name "/usr/share/java/plantuml/plantuml.jar"))

       ;;Enable exec mode to jar
       (plantuml-default-exec-mode 'jar)
       ;;Point to backend
       (plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")

       ;;Outut type
       (plantuml-output-type "png")

       ;;Indent parameters
       (plantuml-indent-level 4)

       ;;ORG-BABEL-INTEGRATION
       ;;add plantuml to orgmode
       :config
       (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))

       ;;load languages for babel mode in orgmode
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((plantuml . t))))
   #+END_SRC
*** COMMENT logview
[[https://github.com/doublep/logview][Logview-mode Github]]
#+NAME: logview-mode
#+BEGIN_SRC emacs-lisp
(use-package logview)
#+END_SRC
Logview major mode for Emacs provides syntax highlighting, filtering and other
features for various log files. The main target are files similar to ones
generated by Log4j, Logback and other Java logging libraries, but there is
really nothing Java-specific in the mode and it should work just fine with any
log that follows similar structure, probably after some configuration.
** TODO complection
*** company
**** TODO company
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish 

  ;;start company mode after init of emacs
  :hook
  (after-init . global-company-mode)

  :bind
  (:map
   company-active-map
   ("C" . company-select-next)
   ("C-p" . company-select-previous))


  :config
  (setq company-minimum-prefix-length 1)
  (setq company-tooltip-limit 7)
  (setq company-show-numbers t)
  (setq company-tooltip-idle-delay 0.0)
  )


#+END_SRC

#+RESULTS:
: company-select-previous

**** TODO company-box
A company front-end with icons.
[[https://github.com/sebastiencs/company-box][Company-box Github]]
#+NAME: company-box
#+BEGIN_SRC emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode)
  :config
  (setq company-box--bottom t)
  (add-to-list 'company-box-icons-functions '(lambda (candidate) " ") t)
  :custom
  (company-box-doc-enable nil)
  (company-box-scrolbar nil)
  
  :bind
  (:map company-active-map
	("M-q" . company-box-doc-manually)
	)
  )
#+END_SRC
*** ivy
**** ivy-base
Ivy is a generic completion mechanism for Emacs. While it operates similarly to other completion schemes such as icomplete-mode, Ivy aims to be more efficient, smaller, simpler, and smoother to use yet highly customizable.
[[https://oremacs.com/swiper/][Ivy User Manual]]
[[https://github.com/abo-abo/swiper][Ivy GitHub]]
***** Ivy
#+NAME: ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
    :demand
    :hook (after-init . ivy-mode)
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-re-builders-alist
     '((counsel-find-file . ivy--regex-plus)
       (counsel-describe-function . ivy--regex-plus)
       (counsel-describe-variable . ivy--regex-plus)
       (counsel-M-x . ivy--regex-plus)
       (swiper-isearch  . ivy--regex-plus)
       (counsel-outline . ivy--regex-plus)
       (t . ivy--regex-plus)))

    :bind 
    ;;Ivy-based interface to standard commands
    (("C-x b" . ivy-switch-buffer)
     ("C-c v" . ivy-push-view)
     ("C-c V" . ivy-pop-view)
     ;;Ivy-resume and other commands
     ("C-c C-r" . ivy-resume)
     ("<f6>" . ivy-resume)))
     #+END_SRC
***** Counsel
Counsel takes this further, providing versions of common Emacs commands that are customised to make the best
#+NAME: conseul
#+BEGIN_SRC emacs-lisp
(use-package counsel
    :after ivy
    :hook (ivy-mode . counsel-mode)
    :bind
    ;;Ivy-based interface to standard commands
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("M-y" . counsel-yank-pop)
     ("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f1> l" . counsel-find-library)
     ("<f2> i" . counsel-info-lookup-symbol)
     ("<f2> u" . counsel-unicode-char)
     ("<f2> j" . counsel-set-variable)

     ;;Ivy-based interface to shell and system tools
     ("C-x l" . counsel-locate)
     ("C-c c" . counsel-compile)
    ;; ("C-c g" . counsel-git)
    ;;("C-c j" . counsel-git-grep)
    ;;("C-c L" . counsel-git-log)
     ("C-c k" . counsel-ag)
     ("C-c m" . counsel-linux-app)
     ("C-c n" . counsel-fzf)
     ("C-c J" . counsel-file-jump)
     ("C-S-o" . counsel-rhythmbox)
     ("C-c w" . counsel-wmctrl)

     ;;Ivy-resume and other commands
     ("C-c b" . counsel-bookmark)
     ("C-c d" . counsel-descbinds)
     ("C-c o" . counsel-outline)
     ("C-c t" . counsel-load-theme)
     ("C-c F" . counsel-org-file))

     :bind 
     (:map minibuffer-local-map ("C-r" . counsel-minibuffer-history))
  
    :custom
    (counsel-outline-face-style 'org)
    (counsel-outline-path-separator " » ")
    (counsel-org-headline-display-todo t)
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    (counsel-describe-symbol-function #'helpful-symbol))
#+END_SRC
***** Swiper
Swiper is an alternative to isearch that uses ivy to show an overview of all matches
#+NAME: swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after (ivy)
    :custom 
    (swiper-verbose nil)
    (swiper-use-visual-line t)
    
    :bind
    ;;Ivy-based interface to standard commands
    ("C-s" . swiper-isearch)
    ("C-r" . swiper-isearch-backward))
#+END_SRC
**** ivy-hydra
#+NAME: ivy-hydra
#+BEGIN_SRC emacs-lisp
(use-package ivy-hydra)
#+END_SRC
**** TODO ivy-rich
This package comes with rich transformers for commands from ivy and counsel. It should be easy enough to define your own transformers too.
[[https://github.com/Yevgnen/ivy-rich][Ivy-rich Github]]
#+NAME: ivy-rich
#+BEGIN_SRC emacs-lisp
        (use-package ivy-rich
         :after (ivy counsel counsel-projectile)
         :init (ivy-rich-mode)
         :config
         (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
         (ivy-rich-project-root-cache-mode 1)

         :custom
         (ivy-rich-path-style 'addrev))

           ;; ivy--display-transformers-alist
           ;; ((package-install . ivy-rich--package-install-transformer)
           ;; 	(counsel-bookmark . ivy-rich--counsel-bookmark-transformer)
           ;; 	(counsel-recentf . ivy-rich--counsel-recentf-transformer)
           ;; 	(counsel-find-file . ivy-rich--counsel-find-file-transformer)
           ;; 	(ivy-switch-buffer . ivy-rich--ivy-switch-buffer-transformer)
           ;; 	(counsel-projectile . counsel-projectile-transformer)
           ;; 	(counsel-projectile-grep . counsel-git-grep-transformer)
           ;; 	(counsel-projectile-switch-to-buffer . counsel-projectile-switch-to-buffer-transformer)
           ;; 	(counsel-projectile-find-dir . counsel-projectile-find-dir-transformer)
           ;; 	(counsel-projectile-find-file . counsel-projectile-find-file-transformer)
           ;; 	(counsel-fonts . counsel--font-with-sample)
           ;; 	(counsel-rg . counsel-git-grep-transformer)
           ;; 	(counsel-pt . counsel-git-grep-transformer)
           ;; 	(counsel-ag . counsel-git-grep-transformer)
           ;; 	(counsel-tracker . counsel-tracker-transformer)
           ;; 	(counsel-buffer-or-recentf . counsel-buffer-or-recentf-transformer)
           ;; 	(counsel-git-grep . counsel-git-grep-transformer)
           ;; 	(counsel-M-x . ivy-rich--counsel-M-x-transformer)
           ;; 	(counsel-describe-function . ivy-rich--counsel-describe-function-transformer)
           ;; 	(counsel-describe-variable . ivy-rich--counsel-describe-variable-transformer)
           ;; 	(counsel-company . counsel--company-display-transformer)
           ;; 	(ivy-yasnippet . ivy-yasnippet-transformer)
           ;; 	(internal-complete-buffer . ivy-switch-buffer-transformer)
           ;; 	(read-file-name-internal . ivy-read-file-transformer))


#+END_SRC
**** TODO ivy-fuz
[[https://github.com/rustify-emacs/fuz.el][Fuz]] provides some fuzzy match scoring/matching functions for Emacs, they are powered by Rust so it’s fast enough
[[https://github.com/Silex/ivy-fuz.el][Ivy-fuz]] Emacs integration between fuz and ivy.

#+NAME: ivy-fuz
#+BEGIN_SRC emacs-lisp

#+END_SRC

** yas
*** yas-base
Снипеты позволяют по сочетанию клавиш
либо по ключевому слову запустить построение шаблона
с достаточно широкими возможностями заполнения нужных
полей.
[[https://github.com/joaotavora/yasnippet/blob/master/doc/snippet-development.org][Документация]]

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :after delight
  :delight (yas-minor-mode "ⓨ")
  :config  
  (setq yas-wrap-around-region t)
  (yas-global-mode))
#+End_SRC
*** COMMENT yas-snippets
Official snippet collection for the yasnippet package.
[[https://github.com/AndreaCrotti/yasnippet-snippets][Yasnippet snipets Github]]
#+NAME: yasnippet-snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets)

#+END_SRC

** TODO COMMENT maxima
*** maxima
 #+BEGIN_SRC emacs-lisp
 ;;  (use-package maxima)
 #+END_SRC
*** imaxima
*** imath
** modeline 
 Minor mode for modifing MODE LINE
 #+BEGIN_SRC emacs-lisp
 (use-package diminish)
 (use-package delight)

 ;;MODELINE config
 ;;===============================================================
 (use-package doom-modeline
   :hook (after-init . doom-modeline-mode)
   :custom (doom-modeline-buffer-file-name-style 'relative-to-project))

#+END_SRC
** keybind
*** which-key
Which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
[[https://github.com/justbur/emacs-which-key][Which-key Github]]
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :delight 
     (which-key-mode "ⓚ")
     :config 
     (which-key-mode)
     :custom 
     (which-key-side-window-max-height 0.4)
     ;; sort single chars alphabetically P p Q q
     (which-key-sort-order 'which-key-key-order-alpha))
 #+END_SRC
*** hydras
**** Hydra
This is a package for GNU Emacs that can be used to tie related commands into a family of short bindings with a common prefix - a Hydra.
[[https://github.com/abo-abo/hydra][Hydra Github]]

I install hydro only for documented process.
For this package is many diferrent cool underline tools as Major-mode-hydra
#+NAME: hydra
#+BEGIN_SRC emacs-lisp
;;(use-package hydra)
#+END_SRC
**** Major-mode-hydra
***** base
Inspired by Spacemacs major mode leader key and based on the
awesome hydra, this package offers a better way to manage your
major mode specific key bindings.
[[https://github.com/jerrypnz/major-mode-hydra.el][Major-mode-hydra Github]]
#+NAME: hydra-major-mode
#+BEGIN_SRC emacs-lisp
(use-package major-mode-hydra
:bind ("M-SPC" . major-mode-hydra))
#+END_SRC
***** COMMENT elisp
#+BEGIN_SRC emacs-lisp
(major-mode-hydra-define emacs-lisp-mode (:quit-key "q")
  ("Eval"
   (("b" eval-buffer "buffer")
    ("e" eval-defun "defun")
    ("r" eval-region "region"))
   "REPL"
   (("I" ielm "ielm"))
   "Test"
   (("t" ert "prompt")
    ("T" (ert t) "all")
    ("F" (ert :failed) "failed"))
   "Doc"
   (("d" describe-foo-at-point "thing-at-pt")
    ("f" counsel-describe-function "function")
    ("v" counsel-describe-variable "variable")
    ("i" info-lookup-symbol "info lookup"))))
#+END_SRC
** logging
#+NAME: command-log-mode
#+BEGIN_SRC emacs-lisp
(use-package command-log-mode
  :custom
  (command-log-mode-key-binding-open-log "<f12>"))
#+END_SRC
** monitoring
 В этом разделе произвожу запуск wakatime для отслеживания времени проведенного внутри emacs

#+NAME: wakatime 
#+BEGIN_SRC emacs-lisp
;;EMACS THEMES
;;===============================================================
(use-package wakatime-mode
 :init (global-wakatime-mode 1)
 :custom (wakatime-cli-path "~/.wakatime/wakatime-cli"))

 #+END_SRC
** apperiance
*** themes
 В этом разделе произвожу конфигурацию внешнего вида редактора
 Плюс дополнительно подготавливаю различные пакеты для загрузки
 #+BEGIN_SRC emacs-lisp
 ;;EMACS THEMES
 ;;===============================================================
 (use-package doom-themes 
 :config
 (load-theme 'doom-dracula t)
 ;;(load-theme 'doom-dark+ t)
 ;;(load-theme 'doom-zenburn t)
 )


 #+END_SRC
*** faces
**** COMMENT rainbow-mode
This minor mode sets background color to strings that match color
names, e.g. #0000ff is displayed in white with a blue background.
[[http://elpa.gnu.org/packages/rainbow-mode.html][Rainbow elpa]]
#+NAME: rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :commands (rainbow-mode)
  :config
  ;;devfine global minor mode from simple minor mode
  (define-globalized-minor-mode q/global-rainbow-mode rainbow-mode
    (lambda () (rainbow-mode +1)))
  (q/global-rainbow-mode))
#+END_SRC
**** COMMENT rainbow-delimiters
"rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth. Each successive level is highlighted in a different color. This makes it easy to spot matching delimiters, orient yourself in the code, and tell which statements are at a given depth.
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimeters Github]]
[[https://dustinlacewell.github.io/emacs.d/#orgc7de0a6][Config writen by dustin lacewell]]
#+NAME: rainbow-delimeters
#+BEGIN_SRC emacs-lisp
;; Functions for random set color for
;;=====================================================================================
(defun gen-col-list (length s v &optional hval)
  (cl-flet ( (random-float () (/ (random 10000000000) 10000000000.0))
          (mod-float (f) (- f (ffloor f))) )
    (unless hval
      (setq hval (random-float)))
    (let ((golden-ratio-conjugate (/ (- (sqrt 5) 1) 2))
          (h hval)
          (current length)
          (ret-list '()))
      (while (> current 0)
        (setq ret-list
              (append ret-list
                      (list (apply 'color-rgb-to-hex (color-hsl-to-rgb h s v)))))
        (setq h (mod-float (+ h golden-ratio-conjugate)))
        (setq current (- current 1)))
      ret-list)))

(defun set-random-rainbow-colors (s l &optional h)
  ;; Output into message buffer in case you get a scheme you REALLY like.
  ;; (message "set-random-rainbow-colors %s" (list s l h))
  (interactive)
  (rainbow-delimiters-mode t)

  ;; Show mismatched braces in bright red.
  (set-face-background 'rainbow-delimiters-unmatched-face "green")

  ;; Rainbow delimiters based on golden ratio
  (let ( (colors (gen-col-list 9 s l h))
         (i 1) )
    (let ( (length (length colors)) )
      ;;(message (concat "i " (number-to-string i) " length " (number-to-string length)))
      (while (<= i length)
        (let ( (rainbow-var-name (concat "rainbow-delimiters-depth-" (number-to-string i) "-face"))
               (col (nth i colors)) )
          ;; (message (concat rainbow-var-name " => " col))
          (set-face-foreground (intern rainbow-var-name) col))
        (setq i (+ i 1))))))

(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :init
  (setq rainbow-delimiters-max-face-count 16)
 (set-random-rainbow-colors 0.6 0.7 0.5)
  :hook
  (prog-mode . rainbow-delimiters-mode))



#+END_SRC
**** ediff-faces-config
Built in package for diffing and merging files
#+NAME: ediff
#+BEGIN_SRC emacs-lisp
;;Taken this config from https://protesilaos.
(use-package ediff
  :config
  ;;color-darken-name
  ;;color-lighten-name
  ;;color-saturate-name
  ;;color-desaturate-name
  (set-face-background 'ediff-current-diff-A
		       (color-desaturate-name (color-darken-name "orange" 25) 90))
  (set-face-background 'ediff-current-diff-B
		       (color-desaturate-name (color-darken-name "green" 25) 90))
  (set-face-background 'ediff-current-diff-C
		       (color-desaturate-name (color-darken-name "yellow" 25) 90))
  (set-face-background 'ediff-fine-diff-Ancestor
		       (color-desaturate-name (color-darken-name "blue" 25) 90))

  (set-face-background 'ediff-fine-diff-A
		       (color-desaturate-name (color-darken-name "orange" 20) 90))
  (set-face-foreground 'ediff-fine-diff-A
		       (color-desaturate-name (color-darken-name "orange" 5) 10))
  (set-face-attribute 'ediff-fine-diff-A nil
		      :weight 'normal :slant 'italic)

  (set-face-background 'ediff-fine-diff-B
		       (color-desaturate-name (color-darken-name "green" 20) 90))
  (set-face-foreground 'ediff-fine-diff-B
		       (color-desaturate-name (color-darken-name "green" 5) 10))
  (set-face-attribute 'ediff-fine-diff-A nil
		      :weight 'normal :slant 'italic)

  (set-face-background 'ediff-fine-diff-C
		       (color-desaturate-name (color-darken-name "yellow" 20) 90))
  (set-face-foreground 'ediff-fine-diff-C
		       (color-desaturate-name (color-darken-name "yellow" 5) 10))
  (set-face-attribute 'ediff-fine-diff-A nil
		      :weight 'normal :slant 'italic)

  (set-face-background 'ediff-fine-diff-Ancestor
		       (color-desaturate-name (color-darken-name "blue" 20) 90))
  (set-face-foreground 'ediff-fine-diff-Ancestor
		       (color-desaturate-name (color-darken-name "blue" 5) 10))
  (set-face-attribute 'ediff-fine-diff-Ancestor nil
		      :weight 'normal :slant 'italic)
  )

;; (color-desaturate-name (color-darken-name "orange" 42) 0)
;; (color-desaturate-name (color-darken-name "green" 42) 0)
;; (color-desaturate-name (color-darken-name "yellow" 42) 0)
;; (color-desaturate-name (color-darken-name "blue" 30) 60)
;; (color-desaturate-name (color-darken-name "orange" 30) 60)
;; (color-desaturate-name (color-darken-name "orange" 30) 60)
;; (color-desaturate-name (color-darken-name "green" 30) 60)
;; (color-desaturate-name (color-darken-name "green" 30) 60)
;; (color-desaturate-name (color-darken-name "yellow" 30) 60)
;; (color-desaturate-name (color-darken-name "yellow" 30) 60)
;; (color-desaturate-name (color-darken-name "blue" 30) 60)
;; (color-desaturate-name (color-darken-name "blue" 30) 60)
#+END_SRC
** COMMENT dash
[[https://github.com/emacs-dashboard/emacs-dashboard][DashBoard Github]]
#+NAME: dash-board
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
An extensible emacs startup screen showing you what’s most important.
Features
  Displays an awesome Emacs banner!
  Recent files
  Bookmarks list
  Recent projects list (Depends on `projectile` or `project.el` package)
  Org mode agenda
  Register list
* perform (epilog)
Here we close the let expression from the preface.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+END_SRC
